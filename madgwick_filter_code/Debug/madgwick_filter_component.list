
madgwick_filter_component.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000199c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08001aa8  08001aa8  00002aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001ad4  08001ad4  0000300c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08001ad4  08001ad4  0000300c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08001ad4  08001ad4  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001ad4  08001ad4  00002ad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001ad8  08001ad8  00002ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001adc  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  2000000c  08001ae8  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  08001ae8  00003120  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a7b9  00000000  00000000  00003035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001798  00000000  00000000  0000d7ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a98  00000000  00000000  0000ef88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000856  00000000  00000000  0000fa20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000156f9  00000000  00000000  00010276  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ca11  00000000  00000000  0002596f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082503  00000000  00000000  00032380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b4883  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c48  00000000  00000000  000b48c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000b7510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001a90 	.word	0x08001a90

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001a90 	.word	0x08001a90

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fa9b 	bl	800068c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f81f 	bl	8000198 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f8e7 	bl	800032c <MX_GPIO_Init>
  MX_I2C1_Init();
 800015e:	f000 f857 	bl	8000210 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000162:	f000 f883 	bl	800026c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000166:	f000 f8b7 	bl	80002d8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  *data = 0x46;
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	2246      	movs	r2, #70	@ 0x46
 800016e:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13,GPIO_PIN_SET );
 8000170:	2201      	movs	r2, #1
 8000172:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000176:	4807      	ldr	r0, [pc, #28]	@ (8000194 <main+0x48>)
 8000178:	f000 fd76 	bl	8000c68 <HAL_GPIO_WritePin>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	    // LED ON
      HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800017c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000180:	4804      	ldr	r0, [pc, #16]	@ (8000194 <main+0x48>)
 8000182:	f000 fd89 	bl	8000c98 <HAL_GPIO_TogglePin>


      // Wait for 500 ms
      HAL_Delay(500);
 8000186:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800018a:	f000 fae1 	bl	8000750 <HAL_Delay>
      HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800018e:	bf00      	nop
 8000190:	e7f4      	b.n	800017c <main+0x30>
 8000192:	bf00      	nop
 8000194:	40011000 	.word	0x40011000

08000198 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b090      	sub	sp, #64	@ 0x40
 800019c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800019e:	f107 0318 	add.w	r3, r7, #24
 80001a2:	2228      	movs	r2, #40	@ 0x28
 80001a4:	2100      	movs	r1, #0
 80001a6:	4618      	mov	r0, r3
 80001a8:	f001 fc46 	bl	8001a38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001ac:	1d3b      	adds	r3, r7, #4
 80001ae:	2200      	movs	r2, #0
 80001b0:	601a      	str	r2, [r3, #0]
 80001b2:	605a      	str	r2, [r3, #4]
 80001b4:	609a      	str	r2, [r3, #8]
 80001b6:	60da      	str	r2, [r3, #12]
 80001b8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001ba:	2302      	movs	r3, #2
 80001bc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001be:	2301      	movs	r3, #1
 80001c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001c2:	2310      	movs	r3, #16
 80001c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001c6:	2300      	movs	r3, #0
 80001c8:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001ca:	f107 0318 	add.w	r3, r7, #24
 80001ce:	4618      	mov	r0, r3
 80001d0:	f000 fec0 	bl	8000f54 <HAL_RCC_OscConfig>
 80001d4:	4603      	mov	r3, r0
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	d001      	beq.n	80001de <SystemClock_Config+0x46>
  {
    Error_Handler();
 80001da:	f000 f8f3 	bl	80003c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001de:	230f      	movs	r3, #15
 80001e0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001e2:	2300      	movs	r3, #0
 80001e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001e6:	2300      	movs	r3, #0
 80001e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80001ea:	2300      	movs	r3, #0
 80001ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001ee:	2300      	movs	r3, #0
 80001f0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80001f2:	1d3b      	adds	r3, r7, #4
 80001f4:	2100      	movs	r1, #0
 80001f6:	4618      	mov	r0, r3
 80001f8:	f001 f92e 	bl	8001458 <HAL_RCC_ClockConfig>
 80001fc:	4603      	mov	r3, r0
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d001      	beq.n	8000206 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000202:	f000 f8df 	bl	80003c4 <Error_Handler>
  }
}
 8000206:	bf00      	nop
 8000208:	3740      	adds	r7, #64	@ 0x40
 800020a:	46bd      	mov	sp, r7
 800020c:	bd80      	pop	{r7, pc}
	...

08000210 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000214:	4b12      	ldr	r3, [pc, #72]	@ (8000260 <MX_I2C1_Init+0x50>)
 8000216:	4a13      	ldr	r2, [pc, #76]	@ (8000264 <MX_I2C1_Init+0x54>)
 8000218:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800021a:	4b11      	ldr	r3, [pc, #68]	@ (8000260 <MX_I2C1_Init+0x50>)
 800021c:	4a12      	ldr	r2, [pc, #72]	@ (8000268 <MX_I2C1_Init+0x58>)
 800021e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000220:	4b0f      	ldr	r3, [pc, #60]	@ (8000260 <MX_I2C1_Init+0x50>)
 8000222:	2200      	movs	r2, #0
 8000224:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000226:	4b0e      	ldr	r3, [pc, #56]	@ (8000260 <MX_I2C1_Init+0x50>)
 8000228:	2200      	movs	r2, #0
 800022a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800022c:	4b0c      	ldr	r3, [pc, #48]	@ (8000260 <MX_I2C1_Init+0x50>)
 800022e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000232:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000234:	4b0a      	ldr	r3, [pc, #40]	@ (8000260 <MX_I2C1_Init+0x50>)
 8000236:	2200      	movs	r2, #0
 8000238:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800023a:	4b09      	ldr	r3, [pc, #36]	@ (8000260 <MX_I2C1_Init+0x50>)
 800023c:	2200      	movs	r2, #0
 800023e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000240:	4b07      	ldr	r3, [pc, #28]	@ (8000260 <MX_I2C1_Init+0x50>)
 8000242:	2200      	movs	r2, #0
 8000244:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000246:	4b06      	ldr	r3, [pc, #24]	@ (8000260 <MX_I2C1_Init+0x50>)
 8000248:	2200      	movs	r2, #0
 800024a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800024c:	4804      	ldr	r0, [pc, #16]	@ (8000260 <MX_I2C1_Init+0x50>)
 800024e:	f000 fd3d 	bl	8000ccc <HAL_I2C_Init>
 8000252:	4603      	mov	r3, r0
 8000254:	2b00      	cmp	r3, #0
 8000256:	d001      	beq.n	800025c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000258:	f000 f8b4 	bl	80003c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800025c:	bf00      	nop
 800025e:	bd80      	pop	{r7, pc}
 8000260:	20000028 	.word	0x20000028
 8000264:	40005400 	.word	0x40005400
 8000268:	000186a0 	.word	0x000186a0

0800026c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000270:	4b17      	ldr	r3, [pc, #92]	@ (80002d0 <MX_SPI1_Init+0x64>)
 8000272:	4a18      	ldr	r2, [pc, #96]	@ (80002d4 <MX_SPI1_Init+0x68>)
 8000274:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000276:	4b16      	ldr	r3, [pc, #88]	@ (80002d0 <MX_SPI1_Init+0x64>)
 8000278:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800027c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800027e:	4b14      	ldr	r3, [pc, #80]	@ (80002d0 <MX_SPI1_Init+0x64>)
 8000280:	2200      	movs	r2, #0
 8000282:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000284:	4b12      	ldr	r3, [pc, #72]	@ (80002d0 <MX_SPI1_Init+0x64>)
 8000286:	2200      	movs	r2, #0
 8000288:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800028a:	4b11      	ldr	r3, [pc, #68]	@ (80002d0 <MX_SPI1_Init+0x64>)
 800028c:	2200      	movs	r2, #0
 800028e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000290:	4b0f      	ldr	r3, [pc, #60]	@ (80002d0 <MX_SPI1_Init+0x64>)
 8000292:	2200      	movs	r2, #0
 8000294:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000296:	4b0e      	ldr	r3, [pc, #56]	@ (80002d0 <MX_SPI1_Init+0x64>)
 8000298:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800029c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800029e:	4b0c      	ldr	r3, [pc, #48]	@ (80002d0 <MX_SPI1_Init+0x64>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80002a4:	4b0a      	ldr	r3, [pc, #40]	@ (80002d0 <MX_SPI1_Init+0x64>)
 80002a6:	2200      	movs	r2, #0
 80002a8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80002aa:	4b09      	ldr	r3, [pc, #36]	@ (80002d0 <MX_SPI1_Init+0x64>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80002b0:	4b07      	ldr	r3, [pc, #28]	@ (80002d0 <MX_SPI1_Init+0x64>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80002b6:	4b06      	ldr	r3, [pc, #24]	@ (80002d0 <MX_SPI1_Init+0x64>)
 80002b8:	220a      	movs	r2, #10
 80002ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80002bc:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <MX_SPI1_Init+0x64>)
 80002be:	f001 fa59 	bl	8001774 <HAL_SPI_Init>
 80002c2:	4603      	mov	r3, r0
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d001      	beq.n	80002cc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80002c8:	f000 f87c 	bl	80003c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80002cc:	bf00      	nop
 80002ce:	bd80      	pop	{r7, pc}
 80002d0:	2000007c 	.word	0x2000007c
 80002d4:	40013000 	.word	0x40013000

080002d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002dc:	4b11      	ldr	r3, [pc, #68]	@ (8000324 <MX_USART1_UART_Init+0x4c>)
 80002de:	4a12      	ldr	r2, [pc, #72]	@ (8000328 <MX_USART1_UART_Init+0x50>)
 80002e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80002e2:	4b10      	ldr	r3, [pc, #64]	@ (8000324 <MX_USART1_UART_Init+0x4c>)
 80002e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80002e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000324 <MX_USART1_UART_Init+0x4c>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000324 <MX_USART1_UART_Init+0x4c>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000324 <MX_USART1_UART_Init+0x4c>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80002fc:	4b09      	ldr	r3, [pc, #36]	@ (8000324 <MX_USART1_UART_Init+0x4c>)
 80002fe:	220c      	movs	r2, #12
 8000300:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000302:	4b08      	ldr	r3, [pc, #32]	@ (8000324 <MX_USART1_UART_Init+0x4c>)
 8000304:	2200      	movs	r2, #0
 8000306:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000308:	4b06      	ldr	r3, [pc, #24]	@ (8000324 <MX_USART1_UART_Init+0x4c>)
 800030a:	2200      	movs	r2, #0
 800030c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800030e:	4805      	ldr	r0, [pc, #20]	@ (8000324 <MX_USART1_UART_Init+0x4c>)
 8000310:	f001 fab4 	bl	800187c <HAL_UART_Init>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d001      	beq.n	800031e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800031a:	f000 f853 	bl	80003c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800031e:	bf00      	nop
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	200000d4 	.word	0x200000d4
 8000328:	40013800 	.word	0x40013800

0800032c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b088      	sub	sp, #32
 8000330:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000332:	f107 0310 	add.w	r3, r7, #16
 8000336:	2200      	movs	r2, #0
 8000338:	601a      	str	r2, [r3, #0]
 800033a:	605a      	str	r2, [r3, #4]
 800033c:	609a      	str	r2, [r3, #8]
 800033e:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000340:	4b1e      	ldr	r3, [pc, #120]	@ (80003bc <MX_GPIO_Init+0x90>)
 8000342:	699b      	ldr	r3, [r3, #24]
 8000344:	4a1d      	ldr	r2, [pc, #116]	@ (80003bc <MX_GPIO_Init+0x90>)
 8000346:	f043 0310 	orr.w	r3, r3, #16
 800034a:	6193      	str	r3, [r2, #24]
 800034c:	4b1b      	ldr	r3, [pc, #108]	@ (80003bc <MX_GPIO_Init+0x90>)
 800034e:	699b      	ldr	r3, [r3, #24]
 8000350:	f003 0310 	and.w	r3, r3, #16
 8000354:	60fb      	str	r3, [r7, #12]
 8000356:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000358:	4b18      	ldr	r3, [pc, #96]	@ (80003bc <MX_GPIO_Init+0x90>)
 800035a:	699b      	ldr	r3, [r3, #24]
 800035c:	4a17      	ldr	r2, [pc, #92]	@ (80003bc <MX_GPIO_Init+0x90>)
 800035e:	f043 0304 	orr.w	r3, r3, #4
 8000362:	6193      	str	r3, [r2, #24]
 8000364:	4b15      	ldr	r3, [pc, #84]	@ (80003bc <MX_GPIO_Init+0x90>)
 8000366:	699b      	ldr	r3, [r3, #24]
 8000368:	f003 0304 	and.w	r3, r3, #4
 800036c:	60bb      	str	r3, [r7, #8]
 800036e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000370:	4b12      	ldr	r3, [pc, #72]	@ (80003bc <MX_GPIO_Init+0x90>)
 8000372:	699b      	ldr	r3, [r3, #24]
 8000374:	4a11      	ldr	r2, [pc, #68]	@ (80003bc <MX_GPIO_Init+0x90>)
 8000376:	f043 0308 	orr.w	r3, r3, #8
 800037a:	6193      	str	r3, [r2, #24]
 800037c:	4b0f      	ldr	r3, [pc, #60]	@ (80003bc <MX_GPIO_Init+0x90>)
 800037e:	699b      	ldr	r3, [r3, #24]
 8000380:	f003 0308 	and.w	r3, r3, #8
 8000384:	607b      	str	r3, [r7, #4]
 8000386:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000388:	2200      	movs	r2, #0
 800038a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800038e:	480c      	ldr	r0, [pc, #48]	@ (80003c0 <MX_GPIO_Init+0x94>)
 8000390:	f000 fc6a 	bl	8000c68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000394:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000398:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800039a:	2301      	movs	r3, #1
 800039c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800039e:	2300      	movs	r3, #0
 80003a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003a2:	2302      	movs	r3, #2
 80003a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003a6:	f107 0310 	add.w	r3, r7, #16
 80003aa:	4619      	mov	r1, r3
 80003ac:	4804      	ldr	r0, [pc, #16]	@ (80003c0 <MX_GPIO_Init+0x94>)
 80003ae:	f000 fad7 	bl	8000960 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80003b2:	bf00      	nop
 80003b4:	3720      	adds	r7, #32
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	40021000 	.word	0x40021000
 80003c0:	40011000 	.word	0x40011000

080003c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003c4:	b480      	push	{r7}
 80003c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003c8:	b672      	cpsid	i
}
 80003ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003cc:	bf00      	nop
 80003ce:	e7fd      	b.n	80003cc <Error_Handler+0x8>

080003d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	b085      	sub	sp, #20
 80003d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003d6:	4b15      	ldr	r3, [pc, #84]	@ (800042c <HAL_MspInit+0x5c>)
 80003d8:	699b      	ldr	r3, [r3, #24]
 80003da:	4a14      	ldr	r2, [pc, #80]	@ (800042c <HAL_MspInit+0x5c>)
 80003dc:	f043 0301 	orr.w	r3, r3, #1
 80003e0:	6193      	str	r3, [r2, #24]
 80003e2:	4b12      	ldr	r3, [pc, #72]	@ (800042c <HAL_MspInit+0x5c>)
 80003e4:	699b      	ldr	r3, [r3, #24]
 80003e6:	f003 0301 	and.w	r3, r3, #1
 80003ea:	60bb      	str	r3, [r7, #8]
 80003ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003ee:	4b0f      	ldr	r3, [pc, #60]	@ (800042c <HAL_MspInit+0x5c>)
 80003f0:	69db      	ldr	r3, [r3, #28]
 80003f2:	4a0e      	ldr	r2, [pc, #56]	@ (800042c <HAL_MspInit+0x5c>)
 80003f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003f8:	61d3      	str	r3, [r2, #28]
 80003fa:	4b0c      	ldr	r3, [pc, #48]	@ (800042c <HAL_MspInit+0x5c>)
 80003fc:	69db      	ldr	r3, [r3, #28]
 80003fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000402:	607b      	str	r3, [r7, #4]
 8000404:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000406:	4b0a      	ldr	r3, [pc, #40]	@ (8000430 <HAL_MspInit+0x60>)
 8000408:	685b      	ldr	r3, [r3, #4]
 800040a:	60fb      	str	r3, [r7, #12]
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000412:	60fb      	str	r3, [r7, #12]
 8000414:	68fb      	ldr	r3, [r7, #12]
 8000416:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800041a:	60fb      	str	r3, [r7, #12]
 800041c:	4a04      	ldr	r2, [pc, #16]	@ (8000430 <HAL_MspInit+0x60>)
 800041e:	68fb      	ldr	r3, [r7, #12]
 8000420:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000422:	bf00      	nop
 8000424:	3714      	adds	r7, #20
 8000426:	46bd      	mov	sp, r7
 8000428:	bc80      	pop	{r7}
 800042a:	4770      	bx	lr
 800042c:	40021000 	.word	0x40021000
 8000430:	40010000 	.word	0x40010000

08000434 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b088      	sub	sp, #32
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800043c:	f107 0310 	add.w	r3, r7, #16
 8000440:	2200      	movs	r2, #0
 8000442:	601a      	str	r2, [r3, #0]
 8000444:	605a      	str	r2, [r3, #4]
 8000446:	609a      	str	r2, [r3, #8]
 8000448:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	4a15      	ldr	r2, [pc, #84]	@ (80004a4 <HAL_I2C_MspInit+0x70>)
 8000450:	4293      	cmp	r3, r2
 8000452:	d123      	bne.n	800049c <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000454:	4b14      	ldr	r3, [pc, #80]	@ (80004a8 <HAL_I2C_MspInit+0x74>)
 8000456:	699b      	ldr	r3, [r3, #24]
 8000458:	4a13      	ldr	r2, [pc, #76]	@ (80004a8 <HAL_I2C_MspInit+0x74>)
 800045a:	f043 0308 	orr.w	r3, r3, #8
 800045e:	6193      	str	r3, [r2, #24]
 8000460:	4b11      	ldr	r3, [pc, #68]	@ (80004a8 <HAL_I2C_MspInit+0x74>)
 8000462:	699b      	ldr	r3, [r3, #24]
 8000464:	f003 0308 	and.w	r3, r3, #8
 8000468:	60fb      	str	r3, [r7, #12]
 800046a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800046c:	23c0      	movs	r3, #192	@ 0xc0
 800046e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000470:	2312      	movs	r3, #18
 8000472:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000474:	2303      	movs	r3, #3
 8000476:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000478:	f107 0310 	add.w	r3, r7, #16
 800047c:	4619      	mov	r1, r3
 800047e:	480b      	ldr	r0, [pc, #44]	@ (80004ac <HAL_I2C_MspInit+0x78>)
 8000480:	f000 fa6e 	bl	8000960 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000484:	4b08      	ldr	r3, [pc, #32]	@ (80004a8 <HAL_I2C_MspInit+0x74>)
 8000486:	69db      	ldr	r3, [r3, #28]
 8000488:	4a07      	ldr	r2, [pc, #28]	@ (80004a8 <HAL_I2C_MspInit+0x74>)
 800048a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800048e:	61d3      	str	r3, [r2, #28]
 8000490:	4b05      	ldr	r3, [pc, #20]	@ (80004a8 <HAL_I2C_MspInit+0x74>)
 8000492:	69db      	ldr	r3, [r3, #28]
 8000494:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000498:	60bb      	str	r3, [r7, #8]
 800049a:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800049c:	bf00      	nop
 800049e:	3720      	adds	r7, #32
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	40005400 	.word	0x40005400
 80004a8:	40021000 	.word	0x40021000
 80004ac:	40010c00 	.word	0x40010c00

080004b0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b088      	sub	sp, #32
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b8:	f107 0310 	add.w	r3, r7, #16
 80004bc:	2200      	movs	r2, #0
 80004be:	601a      	str	r2, [r3, #0]
 80004c0:	605a      	str	r2, [r3, #4]
 80004c2:	609a      	str	r2, [r3, #8]
 80004c4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	4a1b      	ldr	r2, [pc, #108]	@ (8000538 <HAL_SPI_MspInit+0x88>)
 80004cc:	4293      	cmp	r3, r2
 80004ce:	d12f      	bne.n	8000530 <HAL_SPI_MspInit+0x80>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80004d0:	4b1a      	ldr	r3, [pc, #104]	@ (800053c <HAL_SPI_MspInit+0x8c>)
 80004d2:	699b      	ldr	r3, [r3, #24]
 80004d4:	4a19      	ldr	r2, [pc, #100]	@ (800053c <HAL_SPI_MspInit+0x8c>)
 80004d6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80004da:	6193      	str	r3, [r2, #24]
 80004dc:	4b17      	ldr	r3, [pc, #92]	@ (800053c <HAL_SPI_MspInit+0x8c>)
 80004de:	699b      	ldr	r3, [r3, #24]
 80004e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80004e4:	60fb      	str	r3, [r7, #12]
 80004e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e8:	4b14      	ldr	r3, [pc, #80]	@ (800053c <HAL_SPI_MspInit+0x8c>)
 80004ea:	699b      	ldr	r3, [r3, #24]
 80004ec:	4a13      	ldr	r2, [pc, #76]	@ (800053c <HAL_SPI_MspInit+0x8c>)
 80004ee:	f043 0304 	orr.w	r3, r3, #4
 80004f2:	6193      	str	r3, [r2, #24]
 80004f4:	4b11      	ldr	r3, [pc, #68]	@ (800053c <HAL_SPI_MspInit+0x8c>)
 80004f6:	699b      	ldr	r3, [r3, #24]
 80004f8:	f003 0304 	and.w	r3, r3, #4
 80004fc:	60bb      	str	r3, [r7, #8]
 80004fe:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000500:	23a0      	movs	r3, #160	@ 0xa0
 8000502:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000504:	2302      	movs	r3, #2
 8000506:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000508:	2303      	movs	r3, #3
 800050a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800050c:	f107 0310 	add.w	r3, r7, #16
 8000510:	4619      	mov	r1, r3
 8000512:	480b      	ldr	r0, [pc, #44]	@ (8000540 <HAL_SPI_MspInit+0x90>)
 8000514:	f000 fa24 	bl	8000960 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000518:	2340      	movs	r3, #64	@ 0x40
 800051a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800051c:	2300      	movs	r3, #0
 800051e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000520:	2300      	movs	r3, #0
 8000522:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000524:	f107 0310 	add.w	r3, r7, #16
 8000528:	4619      	mov	r1, r3
 800052a:	4805      	ldr	r0, [pc, #20]	@ (8000540 <HAL_SPI_MspInit+0x90>)
 800052c:	f000 fa18 	bl	8000960 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000530:	bf00      	nop
 8000532:	3720      	adds	r7, #32
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	40013000 	.word	0x40013000
 800053c:	40021000 	.word	0x40021000
 8000540:	40010800 	.word	0x40010800

08000544 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b088      	sub	sp, #32
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800054c:	f107 0310 	add.w	r3, r7, #16
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	605a      	str	r2, [r3, #4]
 8000556:	609a      	str	r2, [r3, #8]
 8000558:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	4a1c      	ldr	r2, [pc, #112]	@ (80005d0 <HAL_UART_MspInit+0x8c>)
 8000560:	4293      	cmp	r3, r2
 8000562:	d131      	bne.n	80005c8 <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000564:	4b1b      	ldr	r3, [pc, #108]	@ (80005d4 <HAL_UART_MspInit+0x90>)
 8000566:	699b      	ldr	r3, [r3, #24]
 8000568:	4a1a      	ldr	r2, [pc, #104]	@ (80005d4 <HAL_UART_MspInit+0x90>)
 800056a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800056e:	6193      	str	r3, [r2, #24]
 8000570:	4b18      	ldr	r3, [pc, #96]	@ (80005d4 <HAL_UART_MspInit+0x90>)
 8000572:	699b      	ldr	r3, [r3, #24]
 8000574:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000578:	60fb      	str	r3, [r7, #12]
 800057a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800057c:	4b15      	ldr	r3, [pc, #84]	@ (80005d4 <HAL_UART_MspInit+0x90>)
 800057e:	699b      	ldr	r3, [r3, #24]
 8000580:	4a14      	ldr	r2, [pc, #80]	@ (80005d4 <HAL_UART_MspInit+0x90>)
 8000582:	f043 0304 	orr.w	r3, r3, #4
 8000586:	6193      	str	r3, [r2, #24]
 8000588:	4b12      	ldr	r3, [pc, #72]	@ (80005d4 <HAL_UART_MspInit+0x90>)
 800058a:	699b      	ldr	r3, [r3, #24]
 800058c:	f003 0304 	and.w	r3, r3, #4
 8000590:	60bb      	str	r3, [r7, #8]
 8000592:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000594:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000598:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800059a:	2302      	movs	r3, #2
 800059c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800059e:	2303      	movs	r3, #3
 80005a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a2:	f107 0310 	add.w	r3, r7, #16
 80005a6:	4619      	mov	r1, r3
 80005a8:	480b      	ldr	r0, [pc, #44]	@ (80005d8 <HAL_UART_MspInit+0x94>)
 80005aa:	f000 f9d9 	bl	8000960 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80005ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005b4:	2300      	movs	r3, #0
 80005b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b8:	2300      	movs	r3, #0
 80005ba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005bc:	f107 0310 	add.w	r3, r7, #16
 80005c0:	4619      	mov	r1, r3
 80005c2:	4805      	ldr	r0, [pc, #20]	@ (80005d8 <HAL_UART_MspInit+0x94>)
 80005c4:	f000 f9cc 	bl	8000960 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80005c8:	bf00      	nop
 80005ca:	3720      	adds	r7, #32
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	40013800 	.word	0x40013800
 80005d4:	40021000 	.word	0x40021000
 80005d8:	40010800 	.word	0x40010800

080005dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005e0:	bf00      	nop
 80005e2:	e7fd      	b.n	80005e0 <NMI_Handler+0x4>

080005e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005e8:	bf00      	nop
 80005ea:	e7fd      	b.n	80005e8 <HardFault_Handler+0x4>

080005ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005f0:	bf00      	nop
 80005f2:	e7fd      	b.n	80005f0 <MemManage_Handler+0x4>

080005f4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005f8:	bf00      	nop
 80005fa:	e7fd      	b.n	80005f8 <BusFault_Handler+0x4>

080005fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000600:	bf00      	nop
 8000602:	e7fd      	b.n	8000600 <UsageFault_Handler+0x4>

08000604 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000608:	bf00      	nop
 800060a:	46bd      	mov	sp, r7
 800060c:	bc80      	pop	{r7}
 800060e:	4770      	bx	lr

08000610 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000614:	bf00      	nop
 8000616:	46bd      	mov	sp, r7
 8000618:	bc80      	pop	{r7}
 800061a:	4770      	bx	lr

0800061c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000620:	bf00      	nop
 8000622:	46bd      	mov	sp, r7
 8000624:	bc80      	pop	{r7}
 8000626:	4770      	bx	lr

08000628 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800062c:	f000 f874 	bl	8000718 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000630:	bf00      	nop
 8000632:	bd80      	pop	{r7, pc}

08000634 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	bc80      	pop	{r7}
 800063e:	4770      	bx	lr

08000640 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000640:	f7ff fff8 	bl	8000634 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000644:	480b      	ldr	r0, [pc, #44]	@ (8000674 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000646:	490c      	ldr	r1, [pc, #48]	@ (8000678 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000648:	4a0c      	ldr	r2, [pc, #48]	@ (800067c <LoopFillZerobss+0x16>)
  movs r3, #0
 800064a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800064c:	e002      	b.n	8000654 <LoopCopyDataInit>

0800064e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800064e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000650:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000652:	3304      	adds	r3, #4

08000654 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000654:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000656:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000658:	d3f9      	bcc.n	800064e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800065a:	4a09      	ldr	r2, [pc, #36]	@ (8000680 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800065c:	4c09      	ldr	r4, [pc, #36]	@ (8000684 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800065e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000660:	e001      	b.n	8000666 <LoopFillZerobss>

08000662 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000662:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000664:	3204      	adds	r2, #4

08000666 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000666:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000668:	d3fb      	bcc.n	8000662 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800066a:	f001 f9ed 	bl	8001a48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800066e:	f7ff fd6d 	bl	800014c <main>
  bx lr
 8000672:	4770      	bx	lr
  ldr r0, =_sdata
 8000674:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000678:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800067c:	08001adc 	.word	0x08001adc
  ldr r2, =_sbss
 8000680:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000684:	20000120 	.word	0x20000120

08000688 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000688:	e7fe      	b.n	8000688 <ADC1_2_IRQHandler>
	...

0800068c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000690:	4b08      	ldr	r3, [pc, #32]	@ (80006b4 <HAL_Init+0x28>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a07      	ldr	r2, [pc, #28]	@ (80006b4 <HAL_Init+0x28>)
 8000696:	f043 0310 	orr.w	r3, r3, #16
 800069a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800069c:	2003      	movs	r0, #3
 800069e:	f000 f92b 	bl	80008f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006a2:	200f      	movs	r0, #15
 80006a4:	f000 f808 	bl	80006b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006a8:	f7ff fe92 	bl	80003d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006ac:	2300      	movs	r3, #0
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40022000 	.word	0x40022000

080006b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006c0:	4b12      	ldr	r3, [pc, #72]	@ (800070c <HAL_InitTick+0x54>)
 80006c2:	681a      	ldr	r2, [r3, #0]
 80006c4:	4b12      	ldr	r3, [pc, #72]	@ (8000710 <HAL_InitTick+0x58>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	4619      	mov	r1, r3
 80006ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80006d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80006d6:	4618      	mov	r0, r3
 80006d8:	f000 f935 	bl	8000946 <HAL_SYSTICK_Config>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006e2:	2301      	movs	r3, #1
 80006e4:	e00e      	b.n	8000704 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	2b0f      	cmp	r3, #15
 80006ea:	d80a      	bhi.n	8000702 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006ec:	2200      	movs	r2, #0
 80006ee:	6879      	ldr	r1, [r7, #4]
 80006f0:	f04f 30ff 	mov.w	r0, #4294967295
 80006f4:	f000 f90b 	bl	800090e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006f8:	4a06      	ldr	r2, [pc, #24]	@ (8000714 <HAL_InitTick+0x5c>)
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006fe:	2300      	movs	r3, #0
 8000700:	e000      	b.n	8000704 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000702:	2301      	movs	r3, #1
}
 8000704:	4618      	mov	r0, r3
 8000706:	3708      	adds	r7, #8
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	20000000 	.word	0x20000000
 8000710:	20000008 	.word	0x20000008
 8000714:	20000004 	.word	0x20000004

08000718 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800071c:	4b05      	ldr	r3, [pc, #20]	@ (8000734 <HAL_IncTick+0x1c>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	461a      	mov	r2, r3
 8000722:	4b05      	ldr	r3, [pc, #20]	@ (8000738 <HAL_IncTick+0x20>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4413      	add	r3, r2
 8000728:	4a03      	ldr	r2, [pc, #12]	@ (8000738 <HAL_IncTick+0x20>)
 800072a:	6013      	str	r3, [r2, #0]
}
 800072c:	bf00      	nop
 800072e:	46bd      	mov	sp, r7
 8000730:	bc80      	pop	{r7}
 8000732:	4770      	bx	lr
 8000734:	20000008 	.word	0x20000008
 8000738:	2000011c 	.word	0x2000011c

0800073c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  return uwTick;
 8000740:	4b02      	ldr	r3, [pc, #8]	@ (800074c <HAL_GetTick+0x10>)
 8000742:	681b      	ldr	r3, [r3, #0]
}
 8000744:	4618      	mov	r0, r3
 8000746:	46bd      	mov	sp, r7
 8000748:	bc80      	pop	{r7}
 800074a:	4770      	bx	lr
 800074c:	2000011c 	.word	0x2000011c

08000750 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000758:	f7ff fff0 	bl	800073c <HAL_GetTick>
 800075c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000768:	d005      	beq.n	8000776 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800076a:	4b0a      	ldr	r3, [pc, #40]	@ (8000794 <HAL_Delay+0x44>)
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	461a      	mov	r2, r3
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	4413      	add	r3, r2
 8000774:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000776:	bf00      	nop
 8000778:	f7ff ffe0 	bl	800073c <HAL_GetTick>
 800077c:	4602      	mov	r2, r0
 800077e:	68bb      	ldr	r3, [r7, #8]
 8000780:	1ad3      	subs	r3, r2, r3
 8000782:	68fa      	ldr	r2, [r7, #12]
 8000784:	429a      	cmp	r2, r3
 8000786:	d8f7      	bhi.n	8000778 <HAL_Delay+0x28>
  {
  }
}
 8000788:	bf00      	nop
 800078a:	bf00      	nop
 800078c:	3710      	adds	r7, #16
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000008 	.word	0x20000008

08000798 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000798:	b480      	push	{r7}
 800079a:	b085      	sub	sp, #20
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	f003 0307 	and.w	r3, r3, #7
 80007a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007a8:	4b0c      	ldr	r3, [pc, #48]	@ (80007dc <__NVIC_SetPriorityGrouping+0x44>)
 80007aa:	68db      	ldr	r3, [r3, #12]
 80007ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007ae:	68ba      	ldr	r2, [r7, #8]
 80007b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80007b4:	4013      	ands	r3, r2
 80007b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007bc:	68bb      	ldr	r3, [r7, #8]
 80007be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80007c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007ca:	4a04      	ldr	r2, [pc, #16]	@ (80007dc <__NVIC_SetPriorityGrouping+0x44>)
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	60d3      	str	r3, [r2, #12]
}
 80007d0:	bf00      	nop
 80007d2:	3714      	adds	r7, #20
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bc80      	pop	{r7}
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	e000ed00 	.word	0xe000ed00

080007e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007e4:	4b04      	ldr	r3, [pc, #16]	@ (80007f8 <__NVIC_GetPriorityGrouping+0x18>)
 80007e6:	68db      	ldr	r3, [r3, #12]
 80007e8:	0a1b      	lsrs	r3, r3, #8
 80007ea:	f003 0307 	and.w	r3, r3, #7
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bc80      	pop	{r7}
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	e000ed00 	.word	0xe000ed00

080007fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	4603      	mov	r3, r0
 8000804:	6039      	str	r1, [r7, #0]
 8000806:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800080c:	2b00      	cmp	r3, #0
 800080e:	db0a      	blt.n	8000826 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	b2da      	uxtb	r2, r3
 8000814:	490c      	ldr	r1, [pc, #48]	@ (8000848 <__NVIC_SetPriority+0x4c>)
 8000816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800081a:	0112      	lsls	r2, r2, #4
 800081c:	b2d2      	uxtb	r2, r2
 800081e:	440b      	add	r3, r1
 8000820:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000824:	e00a      	b.n	800083c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	b2da      	uxtb	r2, r3
 800082a:	4908      	ldr	r1, [pc, #32]	@ (800084c <__NVIC_SetPriority+0x50>)
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	f003 030f 	and.w	r3, r3, #15
 8000832:	3b04      	subs	r3, #4
 8000834:	0112      	lsls	r2, r2, #4
 8000836:	b2d2      	uxtb	r2, r2
 8000838:	440b      	add	r3, r1
 800083a:	761a      	strb	r2, [r3, #24]
}
 800083c:	bf00      	nop
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	bc80      	pop	{r7}
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	e000e100 	.word	0xe000e100
 800084c:	e000ed00 	.word	0xe000ed00

08000850 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000850:	b480      	push	{r7}
 8000852:	b089      	sub	sp, #36	@ 0x24
 8000854:	af00      	add	r7, sp, #0
 8000856:	60f8      	str	r0, [r7, #12]
 8000858:	60b9      	str	r1, [r7, #8]
 800085a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	f003 0307 	and.w	r3, r3, #7
 8000862:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000864:	69fb      	ldr	r3, [r7, #28]
 8000866:	f1c3 0307 	rsb	r3, r3, #7
 800086a:	2b04      	cmp	r3, #4
 800086c:	bf28      	it	cs
 800086e:	2304      	movcs	r3, #4
 8000870:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000872:	69fb      	ldr	r3, [r7, #28]
 8000874:	3304      	adds	r3, #4
 8000876:	2b06      	cmp	r3, #6
 8000878:	d902      	bls.n	8000880 <NVIC_EncodePriority+0x30>
 800087a:	69fb      	ldr	r3, [r7, #28]
 800087c:	3b03      	subs	r3, #3
 800087e:	e000      	b.n	8000882 <NVIC_EncodePriority+0x32>
 8000880:	2300      	movs	r3, #0
 8000882:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000884:	f04f 32ff 	mov.w	r2, #4294967295
 8000888:	69bb      	ldr	r3, [r7, #24]
 800088a:	fa02 f303 	lsl.w	r3, r2, r3
 800088e:	43da      	mvns	r2, r3
 8000890:	68bb      	ldr	r3, [r7, #8]
 8000892:	401a      	ands	r2, r3
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000898:	f04f 31ff 	mov.w	r1, #4294967295
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	fa01 f303 	lsl.w	r3, r1, r3
 80008a2:	43d9      	mvns	r1, r3
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008a8:	4313      	orrs	r3, r2
         );
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	3724      	adds	r7, #36	@ 0x24
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bc80      	pop	{r7}
 80008b2:	4770      	bx	lr

080008b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	3b01      	subs	r3, #1
 80008c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80008c4:	d301      	bcc.n	80008ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008c6:	2301      	movs	r3, #1
 80008c8:	e00f      	b.n	80008ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008ca:	4a0a      	ldr	r2, [pc, #40]	@ (80008f4 <SysTick_Config+0x40>)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	3b01      	subs	r3, #1
 80008d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008d2:	210f      	movs	r1, #15
 80008d4:	f04f 30ff 	mov.w	r0, #4294967295
 80008d8:	f7ff ff90 	bl	80007fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008dc:	4b05      	ldr	r3, [pc, #20]	@ (80008f4 <SysTick_Config+0x40>)
 80008de:	2200      	movs	r2, #0
 80008e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008e2:	4b04      	ldr	r3, [pc, #16]	@ (80008f4 <SysTick_Config+0x40>)
 80008e4:	2207      	movs	r2, #7
 80008e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008e8:	2300      	movs	r3, #0
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	3708      	adds	r7, #8
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	e000e010 	.word	0xe000e010

080008f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000900:	6878      	ldr	r0, [r7, #4]
 8000902:	f7ff ff49 	bl	8000798 <__NVIC_SetPriorityGrouping>
}
 8000906:	bf00      	nop
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}

0800090e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800090e:	b580      	push	{r7, lr}
 8000910:	b086      	sub	sp, #24
 8000912:	af00      	add	r7, sp, #0
 8000914:	4603      	mov	r3, r0
 8000916:	60b9      	str	r1, [r7, #8]
 8000918:	607a      	str	r2, [r7, #4]
 800091a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800091c:	2300      	movs	r3, #0
 800091e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000920:	f7ff ff5e 	bl	80007e0 <__NVIC_GetPriorityGrouping>
 8000924:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000926:	687a      	ldr	r2, [r7, #4]
 8000928:	68b9      	ldr	r1, [r7, #8]
 800092a:	6978      	ldr	r0, [r7, #20]
 800092c:	f7ff ff90 	bl	8000850 <NVIC_EncodePriority>
 8000930:	4602      	mov	r2, r0
 8000932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000936:	4611      	mov	r1, r2
 8000938:	4618      	mov	r0, r3
 800093a:	f7ff ff5f 	bl	80007fc <__NVIC_SetPriority>
}
 800093e:	bf00      	nop
 8000940:	3718      	adds	r7, #24
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}

08000946 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000946:	b580      	push	{r7, lr}
 8000948:	b082      	sub	sp, #8
 800094a:	af00      	add	r7, sp, #0
 800094c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800094e:	6878      	ldr	r0, [r7, #4]
 8000950:	f7ff ffb0 	bl	80008b4 <SysTick_Config>
 8000954:	4603      	mov	r3, r0
}
 8000956:	4618      	mov	r0, r3
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
	...

08000960 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000960:	b480      	push	{r7}
 8000962:	b08b      	sub	sp, #44	@ 0x2c
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
 8000968:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800096a:	2300      	movs	r3, #0
 800096c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800096e:	2300      	movs	r3, #0
 8000970:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000972:	e169      	b.n	8000c48 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000974:	2201      	movs	r2, #1
 8000976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000978:	fa02 f303 	lsl.w	r3, r2, r3
 800097c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	69fa      	ldr	r2, [r7, #28]
 8000984:	4013      	ands	r3, r2
 8000986:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000988:	69ba      	ldr	r2, [r7, #24]
 800098a:	69fb      	ldr	r3, [r7, #28]
 800098c:	429a      	cmp	r2, r3
 800098e:	f040 8158 	bne.w	8000c42 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	4a9a      	ldr	r2, [pc, #616]	@ (8000c00 <HAL_GPIO_Init+0x2a0>)
 8000998:	4293      	cmp	r3, r2
 800099a:	d05e      	beq.n	8000a5a <HAL_GPIO_Init+0xfa>
 800099c:	4a98      	ldr	r2, [pc, #608]	@ (8000c00 <HAL_GPIO_Init+0x2a0>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d875      	bhi.n	8000a8e <HAL_GPIO_Init+0x12e>
 80009a2:	4a98      	ldr	r2, [pc, #608]	@ (8000c04 <HAL_GPIO_Init+0x2a4>)
 80009a4:	4293      	cmp	r3, r2
 80009a6:	d058      	beq.n	8000a5a <HAL_GPIO_Init+0xfa>
 80009a8:	4a96      	ldr	r2, [pc, #600]	@ (8000c04 <HAL_GPIO_Init+0x2a4>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d86f      	bhi.n	8000a8e <HAL_GPIO_Init+0x12e>
 80009ae:	4a96      	ldr	r2, [pc, #600]	@ (8000c08 <HAL_GPIO_Init+0x2a8>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d052      	beq.n	8000a5a <HAL_GPIO_Init+0xfa>
 80009b4:	4a94      	ldr	r2, [pc, #592]	@ (8000c08 <HAL_GPIO_Init+0x2a8>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d869      	bhi.n	8000a8e <HAL_GPIO_Init+0x12e>
 80009ba:	4a94      	ldr	r2, [pc, #592]	@ (8000c0c <HAL_GPIO_Init+0x2ac>)
 80009bc:	4293      	cmp	r3, r2
 80009be:	d04c      	beq.n	8000a5a <HAL_GPIO_Init+0xfa>
 80009c0:	4a92      	ldr	r2, [pc, #584]	@ (8000c0c <HAL_GPIO_Init+0x2ac>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d863      	bhi.n	8000a8e <HAL_GPIO_Init+0x12e>
 80009c6:	4a92      	ldr	r2, [pc, #584]	@ (8000c10 <HAL_GPIO_Init+0x2b0>)
 80009c8:	4293      	cmp	r3, r2
 80009ca:	d046      	beq.n	8000a5a <HAL_GPIO_Init+0xfa>
 80009cc:	4a90      	ldr	r2, [pc, #576]	@ (8000c10 <HAL_GPIO_Init+0x2b0>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d85d      	bhi.n	8000a8e <HAL_GPIO_Init+0x12e>
 80009d2:	2b12      	cmp	r3, #18
 80009d4:	d82a      	bhi.n	8000a2c <HAL_GPIO_Init+0xcc>
 80009d6:	2b12      	cmp	r3, #18
 80009d8:	d859      	bhi.n	8000a8e <HAL_GPIO_Init+0x12e>
 80009da:	a201      	add	r2, pc, #4	@ (adr r2, 80009e0 <HAL_GPIO_Init+0x80>)
 80009dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009e0:	08000a5b 	.word	0x08000a5b
 80009e4:	08000a35 	.word	0x08000a35
 80009e8:	08000a47 	.word	0x08000a47
 80009ec:	08000a89 	.word	0x08000a89
 80009f0:	08000a8f 	.word	0x08000a8f
 80009f4:	08000a8f 	.word	0x08000a8f
 80009f8:	08000a8f 	.word	0x08000a8f
 80009fc:	08000a8f 	.word	0x08000a8f
 8000a00:	08000a8f 	.word	0x08000a8f
 8000a04:	08000a8f 	.word	0x08000a8f
 8000a08:	08000a8f 	.word	0x08000a8f
 8000a0c:	08000a8f 	.word	0x08000a8f
 8000a10:	08000a8f 	.word	0x08000a8f
 8000a14:	08000a8f 	.word	0x08000a8f
 8000a18:	08000a8f 	.word	0x08000a8f
 8000a1c:	08000a8f 	.word	0x08000a8f
 8000a20:	08000a8f 	.word	0x08000a8f
 8000a24:	08000a3d 	.word	0x08000a3d
 8000a28:	08000a51 	.word	0x08000a51
 8000a2c:	4a79      	ldr	r2, [pc, #484]	@ (8000c14 <HAL_GPIO_Init+0x2b4>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d013      	beq.n	8000a5a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a32:	e02c      	b.n	8000a8e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	68db      	ldr	r3, [r3, #12]
 8000a38:	623b      	str	r3, [r7, #32]
          break;
 8000a3a:	e029      	b.n	8000a90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	68db      	ldr	r3, [r3, #12]
 8000a40:	3304      	adds	r3, #4
 8000a42:	623b      	str	r3, [r7, #32]
          break;
 8000a44:	e024      	b.n	8000a90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	68db      	ldr	r3, [r3, #12]
 8000a4a:	3308      	adds	r3, #8
 8000a4c:	623b      	str	r3, [r7, #32]
          break;
 8000a4e:	e01f      	b.n	8000a90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	68db      	ldr	r3, [r3, #12]
 8000a54:	330c      	adds	r3, #12
 8000a56:	623b      	str	r3, [r7, #32]
          break;
 8000a58:	e01a      	b.n	8000a90 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	689b      	ldr	r3, [r3, #8]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d102      	bne.n	8000a68 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a62:	2304      	movs	r3, #4
 8000a64:	623b      	str	r3, [r7, #32]
          break;
 8000a66:	e013      	b.n	8000a90 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	689b      	ldr	r3, [r3, #8]
 8000a6c:	2b01      	cmp	r3, #1
 8000a6e:	d105      	bne.n	8000a7c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a70:	2308      	movs	r3, #8
 8000a72:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	69fa      	ldr	r2, [r7, #28]
 8000a78:	611a      	str	r2, [r3, #16]
          break;
 8000a7a:	e009      	b.n	8000a90 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a7c:	2308      	movs	r3, #8
 8000a7e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	69fa      	ldr	r2, [r7, #28]
 8000a84:	615a      	str	r2, [r3, #20]
          break;
 8000a86:	e003      	b.n	8000a90 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	623b      	str	r3, [r7, #32]
          break;
 8000a8c:	e000      	b.n	8000a90 <HAL_GPIO_Init+0x130>
          break;
 8000a8e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a90:	69bb      	ldr	r3, [r7, #24]
 8000a92:	2bff      	cmp	r3, #255	@ 0xff
 8000a94:	d801      	bhi.n	8000a9a <HAL_GPIO_Init+0x13a>
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	e001      	b.n	8000a9e <HAL_GPIO_Init+0x13e>
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	3304      	adds	r3, #4
 8000a9e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000aa0:	69bb      	ldr	r3, [r7, #24]
 8000aa2:	2bff      	cmp	r3, #255	@ 0xff
 8000aa4:	d802      	bhi.n	8000aac <HAL_GPIO_Init+0x14c>
 8000aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aa8:	009b      	lsls	r3, r3, #2
 8000aaa:	e002      	b.n	8000ab2 <HAL_GPIO_Init+0x152>
 8000aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aae:	3b08      	subs	r3, #8
 8000ab0:	009b      	lsls	r3, r3, #2
 8000ab2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	210f      	movs	r1, #15
 8000aba:	693b      	ldr	r3, [r7, #16]
 8000abc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac0:	43db      	mvns	r3, r3
 8000ac2:	401a      	ands	r2, r3
 8000ac4:	6a39      	ldr	r1, [r7, #32]
 8000ac6:	693b      	ldr	r3, [r7, #16]
 8000ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8000acc:	431a      	orrs	r2, r3
 8000ace:	697b      	ldr	r3, [r7, #20]
 8000ad0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	f000 80b1 	beq.w	8000c42 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ae0:	4b4d      	ldr	r3, [pc, #308]	@ (8000c18 <HAL_GPIO_Init+0x2b8>)
 8000ae2:	699b      	ldr	r3, [r3, #24]
 8000ae4:	4a4c      	ldr	r2, [pc, #304]	@ (8000c18 <HAL_GPIO_Init+0x2b8>)
 8000ae6:	f043 0301 	orr.w	r3, r3, #1
 8000aea:	6193      	str	r3, [r2, #24]
 8000aec:	4b4a      	ldr	r3, [pc, #296]	@ (8000c18 <HAL_GPIO_Init+0x2b8>)
 8000aee:	699b      	ldr	r3, [r3, #24]
 8000af0:	f003 0301 	and.w	r3, r3, #1
 8000af4:	60bb      	str	r3, [r7, #8]
 8000af6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000af8:	4a48      	ldr	r2, [pc, #288]	@ (8000c1c <HAL_GPIO_Init+0x2bc>)
 8000afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000afc:	089b      	lsrs	r3, r3, #2
 8000afe:	3302      	adds	r3, #2
 8000b00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b04:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b08:	f003 0303 	and.w	r3, r3, #3
 8000b0c:	009b      	lsls	r3, r3, #2
 8000b0e:	220f      	movs	r2, #15
 8000b10:	fa02 f303 	lsl.w	r3, r2, r3
 8000b14:	43db      	mvns	r3, r3
 8000b16:	68fa      	ldr	r2, [r7, #12]
 8000b18:	4013      	ands	r3, r2
 8000b1a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	4a40      	ldr	r2, [pc, #256]	@ (8000c20 <HAL_GPIO_Init+0x2c0>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d013      	beq.n	8000b4c <HAL_GPIO_Init+0x1ec>
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	4a3f      	ldr	r2, [pc, #252]	@ (8000c24 <HAL_GPIO_Init+0x2c4>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d00d      	beq.n	8000b48 <HAL_GPIO_Init+0x1e8>
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	4a3e      	ldr	r2, [pc, #248]	@ (8000c28 <HAL_GPIO_Init+0x2c8>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d007      	beq.n	8000b44 <HAL_GPIO_Init+0x1e4>
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	4a3d      	ldr	r2, [pc, #244]	@ (8000c2c <HAL_GPIO_Init+0x2cc>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d101      	bne.n	8000b40 <HAL_GPIO_Init+0x1e0>
 8000b3c:	2303      	movs	r3, #3
 8000b3e:	e006      	b.n	8000b4e <HAL_GPIO_Init+0x1ee>
 8000b40:	2304      	movs	r3, #4
 8000b42:	e004      	b.n	8000b4e <HAL_GPIO_Init+0x1ee>
 8000b44:	2302      	movs	r3, #2
 8000b46:	e002      	b.n	8000b4e <HAL_GPIO_Init+0x1ee>
 8000b48:	2301      	movs	r3, #1
 8000b4a:	e000      	b.n	8000b4e <HAL_GPIO_Init+0x1ee>
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b50:	f002 0203 	and.w	r2, r2, #3
 8000b54:	0092      	lsls	r2, r2, #2
 8000b56:	4093      	lsls	r3, r2
 8000b58:	68fa      	ldr	r2, [r7, #12]
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b5e:	492f      	ldr	r1, [pc, #188]	@ (8000c1c <HAL_GPIO_Init+0x2bc>)
 8000b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b62:	089b      	lsrs	r3, r3, #2
 8000b64:	3302      	adds	r3, #2
 8000b66:	68fa      	ldr	r2, [r7, #12]
 8000b68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d006      	beq.n	8000b86 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b78:	4b2d      	ldr	r3, [pc, #180]	@ (8000c30 <HAL_GPIO_Init+0x2d0>)
 8000b7a:	689a      	ldr	r2, [r3, #8]
 8000b7c:	492c      	ldr	r1, [pc, #176]	@ (8000c30 <HAL_GPIO_Init+0x2d0>)
 8000b7e:	69bb      	ldr	r3, [r7, #24]
 8000b80:	4313      	orrs	r3, r2
 8000b82:	608b      	str	r3, [r1, #8]
 8000b84:	e006      	b.n	8000b94 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b86:	4b2a      	ldr	r3, [pc, #168]	@ (8000c30 <HAL_GPIO_Init+0x2d0>)
 8000b88:	689a      	ldr	r2, [r3, #8]
 8000b8a:	69bb      	ldr	r3, [r7, #24]
 8000b8c:	43db      	mvns	r3, r3
 8000b8e:	4928      	ldr	r1, [pc, #160]	@ (8000c30 <HAL_GPIO_Init+0x2d0>)
 8000b90:	4013      	ands	r3, r2
 8000b92:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d006      	beq.n	8000bae <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ba0:	4b23      	ldr	r3, [pc, #140]	@ (8000c30 <HAL_GPIO_Init+0x2d0>)
 8000ba2:	68da      	ldr	r2, [r3, #12]
 8000ba4:	4922      	ldr	r1, [pc, #136]	@ (8000c30 <HAL_GPIO_Init+0x2d0>)
 8000ba6:	69bb      	ldr	r3, [r7, #24]
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	60cb      	str	r3, [r1, #12]
 8000bac:	e006      	b.n	8000bbc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000bae:	4b20      	ldr	r3, [pc, #128]	@ (8000c30 <HAL_GPIO_Init+0x2d0>)
 8000bb0:	68da      	ldr	r2, [r3, #12]
 8000bb2:	69bb      	ldr	r3, [r7, #24]
 8000bb4:	43db      	mvns	r3, r3
 8000bb6:	491e      	ldr	r1, [pc, #120]	@ (8000c30 <HAL_GPIO_Init+0x2d0>)
 8000bb8:	4013      	ands	r3, r2
 8000bba:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d006      	beq.n	8000bd6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000bc8:	4b19      	ldr	r3, [pc, #100]	@ (8000c30 <HAL_GPIO_Init+0x2d0>)
 8000bca:	685a      	ldr	r2, [r3, #4]
 8000bcc:	4918      	ldr	r1, [pc, #96]	@ (8000c30 <HAL_GPIO_Init+0x2d0>)
 8000bce:	69bb      	ldr	r3, [r7, #24]
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	604b      	str	r3, [r1, #4]
 8000bd4:	e006      	b.n	8000be4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000bd6:	4b16      	ldr	r3, [pc, #88]	@ (8000c30 <HAL_GPIO_Init+0x2d0>)
 8000bd8:	685a      	ldr	r2, [r3, #4]
 8000bda:	69bb      	ldr	r3, [r7, #24]
 8000bdc:	43db      	mvns	r3, r3
 8000bde:	4914      	ldr	r1, [pc, #80]	@ (8000c30 <HAL_GPIO_Init+0x2d0>)
 8000be0:	4013      	ands	r3, r2
 8000be2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d021      	beq.n	8000c34 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000bf0:	4b0f      	ldr	r3, [pc, #60]	@ (8000c30 <HAL_GPIO_Init+0x2d0>)
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	490e      	ldr	r1, [pc, #56]	@ (8000c30 <HAL_GPIO_Init+0x2d0>)
 8000bf6:	69bb      	ldr	r3, [r7, #24]
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	600b      	str	r3, [r1, #0]
 8000bfc:	e021      	b.n	8000c42 <HAL_GPIO_Init+0x2e2>
 8000bfe:	bf00      	nop
 8000c00:	10320000 	.word	0x10320000
 8000c04:	10310000 	.word	0x10310000
 8000c08:	10220000 	.word	0x10220000
 8000c0c:	10210000 	.word	0x10210000
 8000c10:	10120000 	.word	0x10120000
 8000c14:	10110000 	.word	0x10110000
 8000c18:	40021000 	.word	0x40021000
 8000c1c:	40010000 	.word	0x40010000
 8000c20:	40010800 	.word	0x40010800
 8000c24:	40010c00 	.word	0x40010c00
 8000c28:	40011000 	.word	0x40011000
 8000c2c:	40011400 	.word	0x40011400
 8000c30:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c34:	4b0b      	ldr	r3, [pc, #44]	@ (8000c64 <HAL_GPIO_Init+0x304>)
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	69bb      	ldr	r3, [r7, #24]
 8000c3a:	43db      	mvns	r3, r3
 8000c3c:	4909      	ldr	r1, [pc, #36]	@ (8000c64 <HAL_GPIO_Init+0x304>)
 8000c3e:	4013      	ands	r3, r2
 8000c40:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c44:	3301      	adds	r3, #1
 8000c46:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c4e:	fa22 f303 	lsr.w	r3, r2, r3
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	f47f ae8e 	bne.w	8000974 <HAL_GPIO_Init+0x14>
  }
}
 8000c58:	bf00      	nop
 8000c5a:	bf00      	nop
 8000c5c:	372c      	adds	r7, #44	@ 0x2c
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bc80      	pop	{r7}
 8000c62:	4770      	bx	lr
 8000c64:	40010400 	.word	0x40010400

08000c68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	460b      	mov	r3, r1
 8000c72:	807b      	strh	r3, [r7, #2]
 8000c74:	4613      	mov	r3, r2
 8000c76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c78:	787b      	ldrb	r3, [r7, #1]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d003      	beq.n	8000c86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c7e:	887a      	ldrh	r2, [r7, #2]
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000c84:	e003      	b.n	8000c8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c86:	887b      	ldrh	r3, [r7, #2]
 8000c88:	041a      	lsls	r2, r3, #16
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	611a      	str	r2, [r3, #16]
}
 8000c8e:	bf00      	nop
 8000c90:	370c      	adds	r7, #12
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bc80      	pop	{r7}
 8000c96:	4770      	bx	lr

08000c98 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b085      	sub	sp, #20
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	460b      	mov	r3, r1
 8000ca2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000caa:	887a      	ldrh	r2, [r7, #2]
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	4013      	ands	r3, r2
 8000cb0:	041a      	lsls	r2, r3, #16
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	43d9      	mvns	r1, r3
 8000cb6:	887b      	ldrh	r3, [r7, #2]
 8000cb8:	400b      	ands	r3, r1
 8000cba:	431a      	orrs	r2, r3
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	611a      	str	r2, [r3, #16]
}
 8000cc0:	bf00      	nop
 8000cc2:	3714      	adds	r7, #20
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bc80      	pop	{r7}
 8000cc8:	4770      	bx	lr
	...

08000ccc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d101      	bne.n	8000cde <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e12b      	b.n	8000f36 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d106      	bne.n	8000cf8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2200      	movs	r2, #0
 8000cee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000cf2:	6878      	ldr	r0, [r7, #4]
 8000cf4:	f7ff fb9e 	bl	8000434 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2224      	movs	r2, #36	@ 0x24
 8000cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f022 0201 	bic.w	r2, r2, #1
 8000d0e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000d1e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000d2e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000d30:	f000 fcda 	bl	80016e8 <HAL_RCC_GetPCLK1Freq>
 8000d34:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	4a81      	ldr	r2, [pc, #516]	@ (8000f40 <HAL_I2C_Init+0x274>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d807      	bhi.n	8000d50 <HAL_I2C_Init+0x84>
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	4a80      	ldr	r2, [pc, #512]	@ (8000f44 <HAL_I2C_Init+0x278>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	bf94      	ite	ls
 8000d48:	2301      	movls	r3, #1
 8000d4a:	2300      	movhi	r3, #0
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	e006      	b.n	8000d5e <HAL_I2C_Init+0x92>
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	4a7d      	ldr	r2, [pc, #500]	@ (8000f48 <HAL_I2C_Init+0x27c>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	bf94      	ite	ls
 8000d58:	2301      	movls	r3, #1
 8000d5a:	2300      	movhi	r3, #0
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	e0e7      	b.n	8000f36 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	4a78      	ldr	r2, [pc, #480]	@ (8000f4c <HAL_I2C_Init+0x280>)
 8000d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d6e:	0c9b      	lsrs	r3, r3, #18
 8000d70:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	68ba      	ldr	r2, [r7, #8]
 8000d82:	430a      	orrs	r2, r1
 8000d84:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	6a1b      	ldr	r3, [r3, #32]
 8000d8c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	4a6a      	ldr	r2, [pc, #424]	@ (8000f40 <HAL_I2C_Init+0x274>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d802      	bhi.n	8000da0 <HAL_I2C_Init+0xd4>
 8000d9a:	68bb      	ldr	r3, [r7, #8]
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	e009      	b.n	8000db4 <HAL_I2C_Init+0xe8>
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000da6:	fb02 f303 	mul.w	r3, r2, r3
 8000daa:	4a69      	ldr	r2, [pc, #420]	@ (8000f50 <HAL_I2C_Init+0x284>)
 8000dac:	fba2 2303 	umull	r2, r3, r2, r3
 8000db0:	099b      	lsrs	r3, r3, #6
 8000db2:	3301      	adds	r3, #1
 8000db4:	687a      	ldr	r2, [r7, #4]
 8000db6:	6812      	ldr	r2, [r2, #0]
 8000db8:	430b      	orrs	r3, r1
 8000dba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	69db      	ldr	r3, [r3, #28]
 8000dc2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8000dc6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	495c      	ldr	r1, [pc, #368]	@ (8000f40 <HAL_I2C_Init+0x274>)
 8000dd0:	428b      	cmp	r3, r1
 8000dd2:	d819      	bhi.n	8000e08 <HAL_I2C_Init+0x13c>
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	1e59      	subs	r1, r3, #1
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	fbb1 f3f3 	udiv	r3, r1, r3
 8000de2:	1c59      	adds	r1, r3, #1
 8000de4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8000de8:	400b      	ands	r3, r1
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d00a      	beq.n	8000e04 <HAL_I2C_Init+0x138>
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	1e59      	subs	r1, r3, #1
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	fbb1 f3f3 	udiv	r3, r1, r3
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e02:	e051      	b.n	8000ea8 <HAL_I2C_Init+0x1dc>
 8000e04:	2304      	movs	r3, #4
 8000e06:	e04f      	b.n	8000ea8 <HAL_I2C_Init+0x1dc>
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	689b      	ldr	r3, [r3, #8]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d111      	bne.n	8000e34 <HAL_I2C_Init+0x168>
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	1e58      	subs	r0, r3, #1
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6859      	ldr	r1, [r3, #4]
 8000e18:	460b      	mov	r3, r1
 8000e1a:	005b      	lsls	r3, r3, #1
 8000e1c:	440b      	add	r3, r1
 8000e1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e22:	3301      	adds	r3, #1
 8000e24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	bf0c      	ite	eq
 8000e2c:	2301      	moveq	r3, #1
 8000e2e:	2300      	movne	r3, #0
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	e012      	b.n	8000e5a <HAL_I2C_Init+0x18e>
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	1e58      	subs	r0, r3, #1
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6859      	ldr	r1, [r3, #4]
 8000e3c:	460b      	mov	r3, r1
 8000e3e:	009b      	lsls	r3, r3, #2
 8000e40:	440b      	add	r3, r1
 8000e42:	0099      	lsls	r1, r3, #2
 8000e44:	440b      	add	r3, r1
 8000e46:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	bf0c      	ite	eq
 8000e54:	2301      	moveq	r3, #1
 8000e56:	2300      	movne	r3, #0
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <HAL_I2C_Init+0x196>
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e022      	b.n	8000ea8 <HAL_I2C_Init+0x1dc>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	689b      	ldr	r3, [r3, #8]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d10e      	bne.n	8000e88 <HAL_I2C_Init+0x1bc>
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	1e58      	subs	r0, r3, #1
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6859      	ldr	r1, [r3, #4]
 8000e72:	460b      	mov	r3, r1
 8000e74:	005b      	lsls	r3, r3, #1
 8000e76:	440b      	add	r3, r1
 8000e78:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e86:	e00f      	b.n	8000ea8 <HAL_I2C_Init+0x1dc>
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	1e58      	subs	r0, r3, #1
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6859      	ldr	r1, [r3, #4]
 8000e90:	460b      	mov	r3, r1
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	440b      	add	r3, r1
 8000e96:	0099      	lsls	r1, r3, #2
 8000e98:	440b      	add	r3, r1
 8000e9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ea4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000ea8:	6879      	ldr	r1, [r7, #4]
 8000eaa:	6809      	ldr	r1, [r1, #0]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	69da      	ldr	r2, [r3, #28]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6a1b      	ldr	r3, [r3, #32]
 8000ec2:	431a      	orrs	r2, r3
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	430a      	orrs	r2, r1
 8000eca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	689b      	ldr	r3, [r3, #8]
 8000ed2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8000ed6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000eda:	687a      	ldr	r2, [r7, #4]
 8000edc:	6911      	ldr	r1, [r2, #16]
 8000ede:	687a      	ldr	r2, [r7, #4]
 8000ee0:	68d2      	ldr	r2, [r2, #12]
 8000ee2:	4311      	orrs	r1, r2
 8000ee4:	687a      	ldr	r2, [r7, #4]
 8000ee6:	6812      	ldr	r2, [r2, #0]
 8000ee8:	430b      	orrs	r3, r1
 8000eea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	68db      	ldr	r3, [r3, #12]
 8000ef2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	695a      	ldr	r2, [r3, #20]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	699b      	ldr	r3, [r3, #24]
 8000efe:	431a      	orrs	r2, r3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	430a      	orrs	r2, r1
 8000f06:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f042 0201 	orr.w	r2, r2, #1
 8000f16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2220      	movs	r2, #32
 8000f22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2200      	movs	r2, #0
 8000f2a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8000f34:	2300      	movs	r3, #0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3710      	adds	r7, #16
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	000186a0 	.word	0x000186a0
 8000f44:	001e847f 	.word	0x001e847f
 8000f48:	003d08ff 	.word	0x003d08ff
 8000f4c:	431bde83 	.word	0x431bde83
 8000f50:	10624dd3 	.word	0x10624dd3

08000f54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d101      	bne.n	8000f66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
 8000f64:	e272      	b.n	800144c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	f000 8087 	beq.w	8001082 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f74:	4b92      	ldr	r3, [pc, #584]	@ (80011c0 <HAL_RCC_OscConfig+0x26c>)
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f003 030c 	and.w	r3, r3, #12
 8000f7c:	2b04      	cmp	r3, #4
 8000f7e:	d00c      	beq.n	8000f9a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f80:	4b8f      	ldr	r3, [pc, #572]	@ (80011c0 <HAL_RCC_OscConfig+0x26c>)
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f003 030c 	and.w	r3, r3, #12
 8000f88:	2b08      	cmp	r3, #8
 8000f8a:	d112      	bne.n	8000fb2 <HAL_RCC_OscConfig+0x5e>
 8000f8c:	4b8c      	ldr	r3, [pc, #560]	@ (80011c0 <HAL_RCC_OscConfig+0x26c>)
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f98:	d10b      	bne.n	8000fb2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f9a:	4b89      	ldr	r3, [pc, #548]	@ (80011c0 <HAL_RCC_OscConfig+0x26c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d06c      	beq.n	8001080 <HAL_RCC_OscConfig+0x12c>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d168      	bne.n	8001080 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e24c      	b.n	800144c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000fba:	d106      	bne.n	8000fca <HAL_RCC_OscConfig+0x76>
 8000fbc:	4b80      	ldr	r3, [pc, #512]	@ (80011c0 <HAL_RCC_OscConfig+0x26c>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a7f      	ldr	r2, [pc, #508]	@ (80011c0 <HAL_RCC_OscConfig+0x26c>)
 8000fc2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fc6:	6013      	str	r3, [r2, #0]
 8000fc8:	e02e      	b.n	8001028 <HAL_RCC_OscConfig+0xd4>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d10c      	bne.n	8000fec <HAL_RCC_OscConfig+0x98>
 8000fd2:	4b7b      	ldr	r3, [pc, #492]	@ (80011c0 <HAL_RCC_OscConfig+0x26c>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a7a      	ldr	r2, [pc, #488]	@ (80011c0 <HAL_RCC_OscConfig+0x26c>)
 8000fd8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000fdc:	6013      	str	r3, [r2, #0]
 8000fde:	4b78      	ldr	r3, [pc, #480]	@ (80011c0 <HAL_RCC_OscConfig+0x26c>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a77      	ldr	r2, [pc, #476]	@ (80011c0 <HAL_RCC_OscConfig+0x26c>)
 8000fe4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000fe8:	6013      	str	r3, [r2, #0]
 8000fea:	e01d      	b.n	8001028 <HAL_RCC_OscConfig+0xd4>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000ff4:	d10c      	bne.n	8001010 <HAL_RCC_OscConfig+0xbc>
 8000ff6:	4b72      	ldr	r3, [pc, #456]	@ (80011c0 <HAL_RCC_OscConfig+0x26c>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a71      	ldr	r2, [pc, #452]	@ (80011c0 <HAL_RCC_OscConfig+0x26c>)
 8000ffc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001000:	6013      	str	r3, [r2, #0]
 8001002:	4b6f      	ldr	r3, [pc, #444]	@ (80011c0 <HAL_RCC_OscConfig+0x26c>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a6e      	ldr	r2, [pc, #440]	@ (80011c0 <HAL_RCC_OscConfig+0x26c>)
 8001008:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800100c:	6013      	str	r3, [r2, #0]
 800100e:	e00b      	b.n	8001028 <HAL_RCC_OscConfig+0xd4>
 8001010:	4b6b      	ldr	r3, [pc, #428]	@ (80011c0 <HAL_RCC_OscConfig+0x26c>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a6a      	ldr	r2, [pc, #424]	@ (80011c0 <HAL_RCC_OscConfig+0x26c>)
 8001016:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800101a:	6013      	str	r3, [r2, #0]
 800101c:	4b68      	ldr	r3, [pc, #416]	@ (80011c0 <HAL_RCC_OscConfig+0x26c>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a67      	ldr	r2, [pc, #412]	@ (80011c0 <HAL_RCC_OscConfig+0x26c>)
 8001022:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001026:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d013      	beq.n	8001058 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001030:	f7ff fb84 	bl	800073c <HAL_GetTick>
 8001034:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001036:	e008      	b.n	800104a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001038:	f7ff fb80 	bl	800073c <HAL_GetTick>
 800103c:	4602      	mov	r2, r0
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	2b64      	cmp	r3, #100	@ 0x64
 8001044:	d901      	bls.n	800104a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001046:	2303      	movs	r3, #3
 8001048:	e200      	b.n	800144c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800104a:	4b5d      	ldr	r3, [pc, #372]	@ (80011c0 <HAL_RCC_OscConfig+0x26c>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001052:	2b00      	cmp	r3, #0
 8001054:	d0f0      	beq.n	8001038 <HAL_RCC_OscConfig+0xe4>
 8001056:	e014      	b.n	8001082 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001058:	f7ff fb70 	bl	800073c <HAL_GetTick>
 800105c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800105e:	e008      	b.n	8001072 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001060:	f7ff fb6c 	bl	800073c <HAL_GetTick>
 8001064:	4602      	mov	r2, r0
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	2b64      	cmp	r3, #100	@ 0x64
 800106c:	d901      	bls.n	8001072 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800106e:	2303      	movs	r3, #3
 8001070:	e1ec      	b.n	800144c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001072:	4b53      	ldr	r3, [pc, #332]	@ (80011c0 <HAL_RCC_OscConfig+0x26c>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800107a:	2b00      	cmp	r3, #0
 800107c:	d1f0      	bne.n	8001060 <HAL_RCC_OscConfig+0x10c>
 800107e:	e000      	b.n	8001082 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001080:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f003 0302 	and.w	r3, r3, #2
 800108a:	2b00      	cmp	r3, #0
 800108c:	d063      	beq.n	8001156 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800108e:	4b4c      	ldr	r3, [pc, #304]	@ (80011c0 <HAL_RCC_OscConfig+0x26c>)
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f003 030c 	and.w	r3, r3, #12
 8001096:	2b00      	cmp	r3, #0
 8001098:	d00b      	beq.n	80010b2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800109a:	4b49      	ldr	r3, [pc, #292]	@ (80011c0 <HAL_RCC_OscConfig+0x26c>)
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f003 030c 	and.w	r3, r3, #12
 80010a2:	2b08      	cmp	r3, #8
 80010a4:	d11c      	bne.n	80010e0 <HAL_RCC_OscConfig+0x18c>
 80010a6:	4b46      	ldr	r3, [pc, #280]	@ (80011c0 <HAL_RCC_OscConfig+0x26c>)
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d116      	bne.n	80010e0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010b2:	4b43      	ldr	r3, [pc, #268]	@ (80011c0 <HAL_RCC_OscConfig+0x26c>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f003 0302 	and.w	r3, r3, #2
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d005      	beq.n	80010ca <HAL_RCC_OscConfig+0x176>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	691b      	ldr	r3, [r3, #16]
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d001      	beq.n	80010ca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	e1c0      	b.n	800144c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010ca:	4b3d      	ldr	r3, [pc, #244]	@ (80011c0 <HAL_RCC_OscConfig+0x26c>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	695b      	ldr	r3, [r3, #20]
 80010d6:	00db      	lsls	r3, r3, #3
 80010d8:	4939      	ldr	r1, [pc, #228]	@ (80011c0 <HAL_RCC_OscConfig+0x26c>)
 80010da:	4313      	orrs	r3, r2
 80010dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010de:	e03a      	b.n	8001156 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	691b      	ldr	r3, [r3, #16]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d020      	beq.n	800112a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010e8:	4b36      	ldr	r3, [pc, #216]	@ (80011c4 <HAL_RCC_OscConfig+0x270>)
 80010ea:	2201      	movs	r2, #1
 80010ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ee:	f7ff fb25 	bl	800073c <HAL_GetTick>
 80010f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010f4:	e008      	b.n	8001108 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010f6:	f7ff fb21 	bl	800073c <HAL_GetTick>
 80010fa:	4602      	mov	r2, r0
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	1ad3      	subs	r3, r2, r3
 8001100:	2b02      	cmp	r3, #2
 8001102:	d901      	bls.n	8001108 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001104:	2303      	movs	r3, #3
 8001106:	e1a1      	b.n	800144c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001108:	4b2d      	ldr	r3, [pc, #180]	@ (80011c0 <HAL_RCC_OscConfig+0x26c>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f003 0302 	and.w	r3, r3, #2
 8001110:	2b00      	cmp	r3, #0
 8001112:	d0f0      	beq.n	80010f6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001114:	4b2a      	ldr	r3, [pc, #168]	@ (80011c0 <HAL_RCC_OscConfig+0x26c>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	695b      	ldr	r3, [r3, #20]
 8001120:	00db      	lsls	r3, r3, #3
 8001122:	4927      	ldr	r1, [pc, #156]	@ (80011c0 <HAL_RCC_OscConfig+0x26c>)
 8001124:	4313      	orrs	r3, r2
 8001126:	600b      	str	r3, [r1, #0]
 8001128:	e015      	b.n	8001156 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800112a:	4b26      	ldr	r3, [pc, #152]	@ (80011c4 <HAL_RCC_OscConfig+0x270>)
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001130:	f7ff fb04 	bl	800073c <HAL_GetTick>
 8001134:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001136:	e008      	b.n	800114a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001138:	f7ff fb00 	bl	800073c <HAL_GetTick>
 800113c:	4602      	mov	r2, r0
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	2b02      	cmp	r3, #2
 8001144:	d901      	bls.n	800114a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001146:	2303      	movs	r3, #3
 8001148:	e180      	b.n	800144c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800114a:	4b1d      	ldr	r3, [pc, #116]	@ (80011c0 <HAL_RCC_OscConfig+0x26c>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f003 0302 	and.w	r3, r3, #2
 8001152:	2b00      	cmp	r3, #0
 8001154:	d1f0      	bne.n	8001138 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f003 0308 	and.w	r3, r3, #8
 800115e:	2b00      	cmp	r3, #0
 8001160:	d03a      	beq.n	80011d8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	699b      	ldr	r3, [r3, #24]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d019      	beq.n	800119e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800116a:	4b17      	ldr	r3, [pc, #92]	@ (80011c8 <HAL_RCC_OscConfig+0x274>)
 800116c:	2201      	movs	r2, #1
 800116e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001170:	f7ff fae4 	bl	800073c <HAL_GetTick>
 8001174:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001176:	e008      	b.n	800118a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001178:	f7ff fae0 	bl	800073c <HAL_GetTick>
 800117c:	4602      	mov	r2, r0
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	2b02      	cmp	r3, #2
 8001184:	d901      	bls.n	800118a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001186:	2303      	movs	r3, #3
 8001188:	e160      	b.n	800144c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800118a:	4b0d      	ldr	r3, [pc, #52]	@ (80011c0 <HAL_RCC_OscConfig+0x26c>)
 800118c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800118e:	f003 0302 	and.w	r3, r3, #2
 8001192:	2b00      	cmp	r3, #0
 8001194:	d0f0      	beq.n	8001178 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001196:	2001      	movs	r0, #1
 8001198:	f000 face 	bl	8001738 <RCC_Delay>
 800119c:	e01c      	b.n	80011d8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800119e:	4b0a      	ldr	r3, [pc, #40]	@ (80011c8 <HAL_RCC_OscConfig+0x274>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011a4:	f7ff faca 	bl	800073c <HAL_GetTick>
 80011a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011aa:	e00f      	b.n	80011cc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011ac:	f7ff fac6 	bl	800073c <HAL_GetTick>
 80011b0:	4602      	mov	r2, r0
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	d908      	bls.n	80011cc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80011ba:	2303      	movs	r3, #3
 80011bc:	e146      	b.n	800144c <HAL_RCC_OscConfig+0x4f8>
 80011be:	bf00      	nop
 80011c0:	40021000 	.word	0x40021000
 80011c4:	42420000 	.word	0x42420000
 80011c8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011cc:	4b92      	ldr	r3, [pc, #584]	@ (8001418 <HAL_RCC_OscConfig+0x4c4>)
 80011ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011d0:	f003 0302 	and.w	r3, r3, #2
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d1e9      	bne.n	80011ac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f003 0304 	and.w	r3, r3, #4
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	f000 80a6 	beq.w	8001332 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011e6:	2300      	movs	r3, #0
 80011e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011ea:	4b8b      	ldr	r3, [pc, #556]	@ (8001418 <HAL_RCC_OscConfig+0x4c4>)
 80011ec:	69db      	ldr	r3, [r3, #28]
 80011ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d10d      	bne.n	8001212 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011f6:	4b88      	ldr	r3, [pc, #544]	@ (8001418 <HAL_RCC_OscConfig+0x4c4>)
 80011f8:	69db      	ldr	r3, [r3, #28]
 80011fa:	4a87      	ldr	r2, [pc, #540]	@ (8001418 <HAL_RCC_OscConfig+0x4c4>)
 80011fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001200:	61d3      	str	r3, [r2, #28]
 8001202:	4b85      	ldr	r3, [pc, #532]	@ (8001418 <HAL_RCC_OscConfig+0x4c4>)
 8001204:	69db      	ldr	r3, [r3, #28]
 8001206:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800120a:	60bb      	str	r3, [r7, #8]
 800120c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800120e:	2301      	movs	r3, #1
 8001210:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001212:	4b82      	ldr	r3, [pc, #520]	@ (800141c <HAL_RCC_OscConfig+0x4c8>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800121a:	2b00      	cmp	r3, #0
 800121c:	d118      	bne.n	8001250 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800121e:	4b7f      	ldr	r3, [pc, #508]	@ (800141c <HAL_RCC_OscConfig+0x4c8>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a7e      	ldr	r2, [pc, #504]	@ (800141c <HAL_RCC_OscConfig+0x4c8>)
 8001224:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001228:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800122a:	f7ff fa87 	bl	800073c <HAL_GetTick>
 800122e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001230:	e008      	b.n	8001244 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001232:	f7ff fa83 	bl	800073c <HAL_GetTick>
 8001236:	4602      	mov	r2, r0
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	2b64      	cmp	r3, #100	@ 0x64
 800123e:	d901      	bls.n	8001244 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001240:	2303      	movs	r3, #3
 8001242:	e103      	b.n	800144c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001244:	4b75      	ldr	r3, [pc, #468]	@ (800141c <HAL_RCC_OscConfig+0x4c8>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800124c:	2b00      	cmp	r3, #0
 800124e:	d0f0      	beq.n	8001232 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	2b01      	cmp	r3, #1
 8001256:	d106      	bne.n	8001266 <HAL_RCC_OscConfig+0x312>
 8001258:	4b6f      	ldr	r3, [pc, #444]	@ (8001418 <HAL_RCC_OscConfig+0x4c4>)
 800125a:	6a1b      	ldr	r3, [r3, #32]
 800125c:	4a6e      	ldr	r2, [pc, #440]	@ (8001418 <HAL_RCC_OscConfig+0x4c4>)
 800125e:	f043 0301 	orr.w	r3, r3, #1
 8001262:	6213      	str	r3, [r2, #32]
 8001264:	e02d      	b.n	80012c2 <HAL_RCC_OscConfig+0x36e>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	68db      	ldr	r3, [r3, #12]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d10c      	bne.n	8001288 <HAL_RCC_OscConfig+0x334>
 800126e:	4b6a      	ldr	r3, [pc, #424]	@ (8001418 <HAL_RCC_OscConfig+0x4c4>)
 8001270:	6a1b      	ldr	r3, [r3, #32]
 8001272:	4a69      	ldr	r2, [pc, #420]	@ (8001418 <HAL_RCC_OscConfig+0x4c4>)
 8001274:	f023 0301 	bic.w	r3, r3, #1
 8001278:	6213      	str	r3, [r2, #32]
 800127a:	4b67      	ldr	r3, [pc, #412]	@ (8001418 <HAL_RCC_OscConfig+0x4c4>)
 800127c:	6a1b      	ldr	r3, [r3, #32]
 800127e:	4a66      	ldr	r2, [pc, #408]	@ (8001418 <HAL_RCC_OscConfig+0x4c4>)
 8001280:	f023 0304 	bic.w	r3, r3, #4
 8001284:	6213      	str	r3, [r2, #32]
 8001286:	e01c      	b.n	80012c2 <HAL_RCC_OscConfig+0x36e>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	2b05      	cmp	r3, #5
 800128e:	d10c      	bne.n	80012aa <HAL_RCC_OscConfig+0x356>
 8001290:	4b61      	ldr	r3, [pc, #388]	@ (8001418 <HAL_RCC_OscConfig+0x4c4>)
 8001292:	6a1b      	ldr	r3, [r3, #32]
 8001294:	4a60      	ldr	r2, [pc, #384]	@ (8001418 <HAL_RCC_OscConfig+0x4c4>)
 8001296:	f043 0304 	orr.w	r3, r3, #4
 800129a:	6213      	str	r3, [r2, #32]
 800129c:	4b5e      	ldr	r3, [pc, #376]	@ (8001418 <HAL_RCC_OscConfig+0x4c4>)
 800129e:	6a1b      	ldr	r3, [r3, #32]
 80012a0:	4a5d      	ldr	r2, [pc, #372]	@ (8001418 <HAL_RCC_OscConfig+0x4c4>)
 80012a2:	f043 0301 	orr.w	r3, r3, #1
 80012a6:	6213      	str	r3, [r2, #32]
 80012a8:	e00b      	b.n	80012c2 <HAL_RCC_OscConfig+0x36e>
 80012aa:	4b5b      	ldr	r3, [pc, #364]	@ (8001418 <HAL_RCC_OscConfig+0x4c4>)
 80012ac:	6a1b      	ldr	r3, [r3, #32]
 80012ae:	4a5a      	ldr	r2, [pc, #360]	@ (8001418 <HAL_RCC_OscConfig+0x4c4>)
 80012b0:	f023 0301 	bic.w	r3, r3, #1
 80012b4:	6213      	str	r3, [r2, #32]
 80012b6:	4b58      	ldr	r3, [pc, #352]	@ (8001418 <HAL_RCC_OscConfig+0x4c4>)
 80012b8:	6a1b      	ldr	r3, [r3, #32]
 80012ba:	4a57      	ldr	r2, [pc, #348]	@ (8001418 <HAL_RCC_OscConfig+0x4c4>)
 80012bc:	f023 0304 	bic.w	r3, r3, #4
 80012c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	68db      	ldr	r3, [r3, #12]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d015      	beq.n	80012f6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ca:	f7ff fa37 	bl	800073c <HAL_GetTick>
 80012ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012d0:	e00a      	b.n	80012e8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012d2:	f7ff fa33 	bl	800073c <HAL_GetTick>
 80012d6:	4602      	mov	r2, r0
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d901      	bls.n	80012e8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80012e4:	2303      	movs	r3, #3
 80012e6:	e0b1      	b.n	800144c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012e8:	4b4b      	ldr	r3, [pc, #300]	@ (8001418 <HAL_RCC_OscConfig+0x4c4>)
 80012ea:	6a1b      	ldr	r3, [r3, #32]
 80012ec:	f003 0302 	and.w	r3, r3, #2
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d0ee      	beq.n	80012d2 <HAL_RCC_OscConfig+0x37e>
 80012f4:	e014      	b.n	8001320 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012f6:	f7ff fa21 	bl	800073c <HAL_GetTick>
 80012fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012fc:	e00a      	b.n	8001314 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012fe:	f7ff fa1d 	bl	800073c <HAL_GetTick>
 8001302:	4602      	mov	r2, r0
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	1ad3      	subs	r3, r2, r3
 8001308:	f241 3288 	movw	r2, #5000	@ 0x1388
 800130c:	4293      	cmp	r3, r2
 800130e:	d901      	bls.n	8001314 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001310:	2303      	movs	r3, #3
 8001312:	e09b      	b.n	800144c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001314:	4b40      	ldr	r3, [pc, #256]	@ (8001418 <HAL_RCC_OscConfig+0x4c4>)
 8001316:	6a1b      	ldr	r3, [r3, #32]
 8001318:	f003 0302 	and.w	r3, r3, #2
 800131c:	2b00      	cmp	r3, #0
 800131e:	d1ee      	bne.n	80012fe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001320:	7dfb      	ldrb	r3, [r7, #23]
 8001322:	2b01      	cmp	r3, #1
 8001324:	d105      	bne.n	8001332 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001326:	4b3c      	ldr	r3, [pc, #240]	@ (8001418 <HAL_RCC_OscConfig+0x4c4>)
 8001328:	69db      	ldr	r3, [r3, #28]
 800132a:	4a3b      	ldr	r2, [pc, #236]	@ (8001418 <HAL_RCC_OscConfig+0x4c4>)
 800132c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001330:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	69db      	ldr	r3, [r3, #28]
 8001336:	2b00      	cmp	r3, #0
 8001338:	f000 8087 	beq.w	800144a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800133c:	4b36      	ldr	r3, [pc, #216]	@ (8001418 <HAL_RCC_OscConfig+0x4c4>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f003 030c 	and.w	r3, r3, #12
 8001344:	2b08      	cmp	r3, #8
 8001346:	d061      	beq.n	800140c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	69db      	ldr	r3, [r3, #28]
 800134c:	2b02      	cmp	r3, #2
 800134e:	d146      	bne.n	80013de <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001350:	4b33      	ldr	r3, [pc, #204]	@ (8001420 <HAL_RCC_OscConfig+0x4cc>)
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001356:	f7ff f9f1 	bl	800073c <HAL_GetTick>
 800135a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800135c:	e008      	b.n	8001370 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800135e:	f7ff f9ed 	bl	800073c <HAL_GetTick>
 8001362:	4602      	mov	r2, r0
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	2b02      	cmp	r3, #2
 800136a:	d901      	bls.n	8001370 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800136c:	2303      	movs	r3, #3
 800136e:	e06d      	b.n	800144c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001370:	4b29      	ldr	r3, [pc, #164]	@ (8001418 <HAL_RCC_OscConfig+0x4c4>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001378:	2b00      	cmp	r3, #0
 800137a:	d1f0      	bne.n	800135e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6a1b      	ldr	r3, [r3, #32]
 8001380:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001384:	d108      	bne.n	8001398 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001386:	4b24      	ldr	r3, [pc, #144]	@ (8001418 <HAL_RCC_OscConfig+0x4c4>)
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	4921      	ldr	r1, [pc, #132]	@ (8001418 <HAL_RCC_OscConfig+0x4c4>)
 8001394:	4313      	orrs	r3, r2
 8001396:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001398:	4b1f      	ldr	r3, [pc, #124]	@ (8001418 <HAL_RCC_OscConfig+0x4c4>)
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6a19      	ldr	r1, [r3, #32]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013a8:	430b      	orrs	r3, r1
 80013aa:	491b      	ldr	r1, [pc, #108]	@ (8001418 <HAL_RCC_OscConfig+0x4c4>)
 80013ac:	4313      	orrs	r3, r2
 80013ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001420 <HAL_RCC_OscConfig+0x4cc>)
 80013b2:	2201      	movs	r2, #1
 80013b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b6:	f7ff f9c1 	bl	800073c <HAL_GetTick>
 80013ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013bc:	e008      	b.n	80013d0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013be:	f7ff f9bd 	bl	800073c <HAL_GetTick>
 80013c2:	4602      	mov	r2, r0
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	d901      	bls.n	80013d0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80013cc:	2303      	movs	r3, #3
 80013ce:	e03d      	b.n	800144c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013d0:	4b11      	ldr	r3, [pc, #68]	@ (8001418 <HAL_RCC_OscConfig+0x4c4>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d0f0      	beq.n	80013be <HAL_RCC_OscConfig+0x46a>
 80013dc:	e035      	b.n	800144a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013de:	4b10      	ldr	r3, [pc, #64]	@ (8001420 <HAL_RCC_OscConfig+0x4cc>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e4:	f7ff f9aa 	bl	800073c <HAL_GetTick>
 80013e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013ea:	e008      	b.n	80013fe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013ec:	f7ff f9a6 	bl	800073c <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	d901      	bls.n	80013fe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80013fa:	2303      	movs	r3, #3
 80013fc:	e026      	b.n	800144c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013fe:	4b06      	ldr	r3, [pc, #24]	@ (8001418 <HAL_RCC_OscConfig+0x4c4>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d1f0      	bne.n	80013ec <HAL_RCC_OscConfig+0x498>
 800140a:	e01e      	b.n	800144a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	69db      	ldr	r3, [r3, #28]
 8001410:	2b01      	cmp	r3, #1
 8001412:	d107      	bne.n	8001424 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001414:	2301      	movs	r3, #1
 8001416:	e019      	b.n	800144c <HAL_RCC_OscConfig+0x4f8>
 8001418:	40021000 	.word	0x40021000
 800141c:	40007000 	.word	0x40007000
 8001420:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001424:	4b0b      	ldr	r3, [pc, #44]	@ (8001454 <HAL_RCC_OscConfig+0x500>)
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6a1b      	ldr	r3, [r3, #32]
 8001434:	429a      	cmp	r2, r3
 8001436:	d106      	bne.n	8001446 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001442:	429a      	cmp	r2, r3
 8001444:	d001      	beq.n	800144a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e000      	b.n	800144c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800144a:	2300      	movs	r3, #0
}
 800144c:	4618      	mov	r0, r3
 800144e:	3718      	adds	r7, #24
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	40021000 	.word	0x40021000

08001458 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d101      	bne.n	800146c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001468:	2301      	movs	r3, #1
 800146a:	e0d0      	b.n	800160e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800146c:	4b6a      	ldr	r3, [pc, #424]	@ (8001618 <HAL_RCC_ClockConfig+0x1c0>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 0307 	and.w	r3, r3, #7
 8001474:	683a      	ldr	r2, [r7, #0]
 8001476:	429a      	cmp	r2, r3
 8001478:	d910      	bls.n	800149c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800147a:	4b67      	ldr	r3, [pc, #412]	@ (8001618 <HAL_RCC_ClockConfig+0x1c0>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f023 0207 	bic.w	r2, r3, #7
 8001482:	4965      	ldr	r1, [pc, #404]	@ (8001618 <HAL_RCC_ClockConfig+0x1c0>)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	4313      	orrs	r3, r2
 8001488:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800148a:	4b63      	ldr	r3, [pc, #396]	@ (8001618 <HAL_RCC_ClockConfig+0x1c0>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 0307 	and.w	r3, r3, #7
 8001492:	683a      	ldr	r2, [r7, #0]
 8001494:	429a      	cmp	r2, r3
 8001496:	d001      	beq.n	800149c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e0b8      	b.n	800160e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 0302 	and.w	r3, r3, #2
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d020      	beq.n	80014ea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 0304 	and.w	r3, r3, #4
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d005      	beq.n	80014c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014b4:	4b59      	ldr	r3, [pc, #356]	@ (800161c <HAL_RCC_ClockConfig+0x1c4>)
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	4a58      	ldr	r2, [pc, #352]	@ (800161c <HAL_RCC_ClockConfig+0x1c4>)
 80014ba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80014be:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 0308 	and.w	r3, r3, #8
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d005      	beq.n	80014d8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014cc:	4b53      	ldr	r3, [pc, #332]	@ (800161c <HAL_RCC_ClockConfig+0x1c4>)
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	4a52      	ldr	r2, [pc, #328]	@ (800161c <HAL_RCC_ClockConfig+0x1c4>)
 80014d2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80014d6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014d8:	4b50      	ldr	r3, [pc, #320]	@ (800161c <HAL_RCC_ClockConfig+0x1c4>)
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	494d      	ldr	r1, [pc, #308]	@ (800161c <HAL_RCC_ClockConfig+0x1c4>)
 80014e6:	4313      	orrs	r3, r2
 80014e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d040      	beq.n	8001578 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d107      	bne.n	800150e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014fe:	4b47      	ldr	r3, [pc, #284]	@ (800161c <HAL_RCC_ClockConfig+0x1c4>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d115      	bne.n	8001536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e07f      	b.n	800160e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	2b02      	cmp	r3, #2
 8001514:	d107      	bne.n	8001526 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001516:	4b41      	ldr	r3, [pc, #260]	@ (800161c <HAL_RCC_ClockConfig+0x1c4>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d109      	bne.n	8001536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e073      	b.n	800160e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001526:	4b3d      	ldr	r3, [pc, #244]	@ (800161c <HAL_RCC_ClockConfig+0x1c4>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	2b00      	cmp	r3, #0
 8001530:	d101      	bne.n	8001536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e06b      	b.n	800160e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001536:	4b39      	ldr	r3, [pc, #228]	@ (800161c <HAL_RCC_ClockConfig+0x1c4>)
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f023 0203 	bic.w	r2, r3, #3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	4936      	ldr	r1, [pc, #216]	@ (800161c <HAL_RCC_ClockConfig+0x1c4>)
 8001544:	4313      	orrs	r3, r2
 8001546:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001548:	f7ff f8f8 	bl	800073c <HAL_GetTick>
 800154c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800154e:	e00a      	b.n	8001566 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001550:	f7ff f8f4 	bl	800073c <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800155e:	4293      	cmp	r3, r2
 8001560:	d901      	bls.n	8001566 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e053      	b.n	800160e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001566:	4b2d      	ldr	r3, [pc, #180]	@ (800161c <HAL_RCC_ClockConfig+0x1c4>)
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f003 020c 	and.w	r2, r3, #12
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	429a      	cmp	r2, r3
 8001576:	d1eb      	bne.n	8001550 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001578:	4b27      	ldr	r3, [pc, #156]	@ (8001618 <HAL_RCC_ClockConfig+0x1c0>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0307 	and.w	r3, r3, #7
 8001580:	683a      	ldr	r2, [r7, #0]
 8001582:	429a      	cmp	r2, r3
 8001584:	d210      	bcs.n	80015a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001586:	4b24      	ldr	r3, [pc, #144]	@ (8001618 <HAL_RCC_ClockConfig+0x1c0>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f023 0207 	bic.w	r2, r3, #7
 800158e:	4922      	ldr	r1, [pc, #136]	@ (8001618 <HAL_RCC_ClockConfig+0x1c0>)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	4313      	orrs	r3, r2
 8001594:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001596:	4b20      	ldr	r3, [pc, #128]	@ (8001618 <HAL_RCC_ClockConfig+0x1c0>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0307 	and.w	r3, r3, #7
 800159e:	683a      	ldr	r2, [r7, #0]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d001      	beq.n	80015a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e032      	b.n	800160e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 0304 	and.w	r3, r3, #4
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d008      	beq.n	80015c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015b4:	4b19      	ldr	r3, [pc, #100]	@ (800161c <HAL_RCC_ClockConfig+0x1c4>)
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	4916      	ldr	r1, [pc, #88]	@ (800161c <HAL_RCC_ClockConfig+0x1c4>)
 80015c2:	4313      	orrs	r3, r2
 80015c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0308 	and.w	r3, r3, #8
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d009      	beq.n	80015e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80015d2:	4b12      	ldr	r3, [pc, #72]	@ (800161c <HAL_RCC_ClockConfig+0x1c4>)
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	691b      	ldr	r3, [r3, #16]
 80015de:	00db      	lsls	r3, r3, #3
 80015e0:	490e      	ldr	r1, [pc, #56]	@ (800161c <HAL_RCC_ClockConfig+0x1c4>)
 80015e2:	4313      	orrs	r3, r2
 80015e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015e6:	f000 f821 	bl	800162c <HAL_RCC_GetSysClockFreq>
 80015ea:	4602      	mov	r2, r0
 80015ec:	4b0b      	ldr	r3, [pc, #44]	@ (800161c <HAL_RCC_ClockConfig+0x1c4>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	091b      	lsrs	r3, r3, #4
 80015f2:	f003 030f 	and.w	r3, r3, #15
 80015f6:	490a      	ldr	r1, [pc, #40]	@ (8001620 <HAL_RCC_ClockConfig+0x1c8>)
 80015f8:	5ccb      	ldrb	r3, [r1, r3]
 80015fa:	fa22 f303 	lsr.w	r3, r2, r3
 80015fe:	4a09      	ldr	r2, [pc, #36]	@ (8001624 <HAL_RCC_ClockConfig+0x1cc>)
 8001600:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001602:	4b09      	ldr	r3, [pc, #36]	@ (8001628 <HAL_RCC_ClockConfig+0x1d0>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff f856 	bl	80006b8 <HAL_InitTick>

  return HAL_OK;
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	3710      	adds	r7, #16
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40022000 	.word	0x40022000
 800161c:	40021000 	.word	0x40021000
 8001620:	08001aa8 	.word	0x08001aa8
 8001624:	20000000 	.word	0x20000000
 8001628:	20000004 	.word	0x20000004

0800162c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800162c:	b480      	push	{r7}
 800162e:	b087      	sub	sp, #28
 8001630:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001632:	2300      	movs	r3, #0
 8001634:	60fb      	str	r3, [r7, #12]
 8001636:	2300      	movs	r3, #0
 8001638:	60bb      	str	r3, [r7, #8]
 800163a:	2300      	movs	r3, #0
 800163c:	617b      	str	r3, [r7, #20]
 800163e:	2300      	movs	r3, #0
 8001640:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001642:	2300      	movs	r3, #0
 8001644:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001646:	4b1e      	ldr	r3, [pc, #120]	@ (80016c0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f003 030c 	and.w	r3, r3, #12
 8001652:	2b04      	cmp	r3, #4
 8001654:	d002      	beq.n	800165c <HAL_RCC_GetSysClockFreq+0x30>
 8001656:	2b08      	cmp	r3, #8
 8001658:	d003      	beq.n	8001662 <HAL_RCC_GetSysClockFreq+0x36>
 800165a:	e027      	b.n	80016ac <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800165c:	4b19      	ldr	r3, [pc, #100]	@ (80016c4 <HAL_RCC_GetSysClockFreq+0x98>)
 800165e:	613b      	str	r3, [r7, #16]
      break;
 8001660:	e027      	b.n	80016b2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	0c9b      	lsrs	r3, r3, #18
 8001666:	f003 030f 	and.w	r3, r3, #15
 800166a:	4a17      	ldr	r2, [pc, #92]	@ (80016c8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800166c:	5cd3      	ldrb	r3, [r2, r3]
 800166e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d010      	beq.n	800169c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800167a:	4b11      	ldr	r3, [pc, #68]	@ (80016c0 <HAL_RCC_GetSysClockFreq+0x94>)
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	0c5b      	lsrs	r3, r3, #17
 8001680:	f003 0301 	and.w	r3, r3, #1
 8001684:	4a11      	ldr	r2, [pc, #68]	@ (80016cc <HAL_RCC_GetSysClockFreq+0xa0>)
 8001686:	5cd3      	ldrb	r3, [r2, r3]
 8001688:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a0d      	ldr	r2, [pc, #52]	@ (80016c4 <HAL_RCC_GetSysClockFreq+0x98>)
 800168e:	fb03 f202 	mul.w	r2, r3, r2
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	fbb2 f3f3 	udiv	r3, r2, r3
 8001698:	617b      	str	r3, [r7, #20]
 800169a:	e004      	b.n	80016a6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	4a0c      	ldr	r2, [pc, #48]	@ (80016d0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80016a0:	fb02 f303 	mul.w	r3, r2, r3
 80016a4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	613b      	str	r3, [r7, #16]
      break;
 80016aa:	e002      	b.n	80016b2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80016ac:	4b05      	ldr	r3, [pc, #20]	@ (80016c4 <HAL_RCC_GetSysClockFreq+0x98>)
 80016ae:	613b      	str	r3, [r7, #16]
      break;
 80016b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016b2:	693b      	ldr	r3, [r7, #16]
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	371c      	adds	r7, #28
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bc80      	pop	{r7}
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	40021000 	.word	0x40021000
 80016c4:	007a1200 	.word	0x007a1200
 80016c8:	08001ac0 	.word	0x08001ac0
 80016cc:	08001ad0 	.word	0x08001ad0
 80016d0:	003d0900 	.word	0x003d0900

080016d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016d8:	4b02      	ldr	r3, [pc, #8]	@ (80016e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80016da:	681b      	ldr	r3, [r3, #0]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	46bd      	mov	sp, r7
 80016e0:	bc80      	pop	{r7}
 80016e2:	4770      	bx	lr
 80016e4:	20000000 	.word	0x20000000

080016e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80016ec:	f7ff fff2 	bl	80016d4 <HAL_RCC_GetHCLKFreq>
 80016f0:	4602      	mov	r2, r0
 80016f2:	4b05      	ldr	r3, [pc, #20]	@ (8001708 <HAL_RCC_GetPCLK1Freq+0x20>)
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	0a1b      	lsrs	r3, r3, #8
 80016f8:	f003 0307 	and.w	r3, r3, #7
 80016fc:	4903      	ldr	r1, [pc, #12]	@ (800170c <HAL_RCC_GetPCLK1Freq+0x24>)
 80016fe:	5ccb      	ldrb	r3, [r1, r3]
 8001700:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001704:	4618      	mov	r0, r3
 8001706:	bd80      	pop	{r7, pc}
 8001708:	40021000 	.word	0x40021000
 800170c:	08001ab8 	.word	0x08001ab8

08001710 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001714:	f7ff ffde 	bl	80016d4 <HAL_RCC_GetHCLKFreq>
 8001718:	4602      	mov	r2, r0
 800171a:	4b05      	ldr	r3, [pc, #20]	@ (8001730 <HAL_RCC_GetPCLK2Freq+0x20>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	0adb      	lsrs	r3, r3, #11
 8001720:	f003 0307 	and.w	r3, r3, #7
 8001724:	4903      	ldr	r1, [pc, #12]	@ (8001734 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001726:	5ccb      	ldrb	r3, [r1, r3]
 8001728:	fa22 f303 	lsr.w	r3, r2, r3
}
 800172c:	4618      	mov	r0, r3
 800172e:	bd80      	pop	{r7, pc}
 8001730:	40021000 	.word	0x40021000
 8001734:	08001ab8 	.word	0x08001ab8

08001738 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001738:	b480      	push	{r7}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001740:	4b0a      	ldr	r3, [pc, #40]	@ (800176c <RCC_Delay+0x34>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a0a      	ldr	r2, [pc, #40]	@ (8001770 <RCC_Delay+0x38>)
 8001746:	fba2 2303 	umull	r2, r3, r2, r3
 800174a:	0a5b      	lsrs	r3, r3, #9
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	fb02 f303 	mul.w	r3, r2, r3
 8001752:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001754:	bf00      	nop
  }
  while (Delay --);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	1e5a      	subs	r2, r3, #1
 800175a:	60fa      	str	r2, [r7, #12]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d1f9      	bne.n	8001754 <RCC_Delay+0x1c>
}
 8001760:	bf00      	nop
 8001762:	bf00      	nop
 8001764:	3714      	adds	r7, #20
 8001766:	46bd      	mov	sp, r7
 8001768:	bc80      	pop	{r7}
 800176a:	4770      	bx	lr
 800176c:	20000000 	.word	0x20000000
 8001770:	10624dd3 	.word	0x10624dd3

08001774 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d101      	bne.n	8001786 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e076      	b.n	8001874 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800178a:	2b00      	cmp	r3, #0
 800178c:	d108      	bne.n	80017a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001796:	d009      	beq.n	80017ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2200      	movs	r2, #0
 800179c:	61da      	str	r2, [r3, #28]
 800179e:	e005      	b.n	80017ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2200      	movs	r2, #0
 80017a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2200      	movs	r2, #0
 80017aa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2200      	movs	r2, #0
 80017b0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d106      	bne.n	80017cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2200      	movs	r2, #0
 80017c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f7fe fe72 	bl	80004b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2202      	movs	r2, #2
 80017d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80017e2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80017f4:	431a      	orrs	r2, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	68db      	ldr	r3, [r3, #12]
 80017fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80017fe:	431a      	orrs	r2, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	691b      	ldr	r3, [r3, #16]
 8001804:	f003 0302 	and.w	r3, r3, #2
 8001808:	431a      	orrs	r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	695b      	ldr	r3, [r3, #20]
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	431a      	orrs	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800181c:	431a      	orrs	r2, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	69db      	ldr	r3, [r3, #28]
 8001822:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001826:	431a      	orrs	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6a1b      	ldr	r3, [r3, #32]
 800182c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001830:	ea42 0103 	orr.w	r1, r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001838:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	430a      	orrs	r2, r1
 8001842:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	0c1a      	lsrs	r2, r3, #16
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f002 0204 	and.w	r2, r2, #4
 8001852:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	69da      	ldr	r2, [r3, #28]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001862:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2201      	movs	r2, #1
 800186e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001872:	2300      	movs	r3, #0
}
 8001874:	4618      	mov	r0, r3
 8001876:	3708      	adds	r7, #8
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d101      	bne.n	800188e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e042      	b.n	8001914 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001894:	b2db      	uxtb	r3, r3
 8001896:	2b00      	cmp	r3, #0
 8001898:	d106      	bne.n	80018a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f7fe fe4e 	bl	8000544 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2224      	movs	r2, #36	@ 0x24
 80018ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	68da      	ldr	r2, [r3, #12]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80018be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f000 f82b 	bl	800191c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	691a      	ldr	r2, [r3, #16]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80018d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	695a      	ldr	r2, [r3, #20]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80018e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	68da      	ldr	r2, [r3, #12]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80018f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2200      	movs	r2, #0
 80018fa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2220      	movs	r2, #32
 8001900:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2220      	movs	r2, #32
 8001908:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001912:	2300      	movs	r3, #0
}
 8001914:	4618      	mov	r0, r3
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}

0800191c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	691b      	ldr	r3, [r3, #16]
 800192a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	68da      	ldr	r2, [r3, #12]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	430a      	orrs	r2, r1
 8001938:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	689a      	ldr	r2, [r3, #8]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	691b      	ldr	r3, [r3, #16]
 8001942:	431a      	orrs	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	695b      	ldr	r3, [r3, #20]
 8001948:	4313      	orrs	r3, r2
 800194a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8001956:	f023 030c 	bic.w	r3, r3, #12
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	6812      	ldr	r2, [r2, #0]
 800195e:	68b9      	ldr	r1, [r7, #8]
 8001960:	430b      	orrs	r3, r1
 8001962:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	695b      	ldr	r3, [r3, #20]
 800196a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	699a      	ldr	r2, [r3, #24]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	430a      	orrs	r2, r1
 8001978:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a2c      	ldr	r2, [pc, #176]	@ (8001a30 <UART_SetConfig+0x114>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d103      	bne.n	800198c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001984:	f7ff fec4 	bl	8001710 <HAL_RCC_GetPCLK2Freq>
 8001988:	60f8      	str	r0, [r7, #12]
 800198a:	e002      	b.n	8001992 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800198c:	f7ff feac 	bl	80016e8 <HAL_RCC_GetPCLK1Freq>
 8001990:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001992:	68fa      	ldr	r2, [r7, #12]
 8001994:	4613      	mov	r3, r2
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	4413      	add	r3, r2
 800199a:	009a      	lsls	r2, r3, #2
 800199c:	441a      	add	r2, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80019a8:	4a22      	ldr	r2, [pc, #136]	@ (8001a34 <UART_SetConfig+0x118>)
 80019aa:	fba2 2303 	umull	r2, r3, r2, r3
 80019ae:	095b      	lsrs	r3, r3, #5
 80019b0:	0119      	lsls	r1, r3, #4
 80019b2:	68fa      	ldr	r2, [r7, #12]
 80019b4:	4613      	mov	r3, r2
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	4413      	add	r3, r2
 80019ba:	009a      	lsls	r2, r3, #2
 80019bc:	441a      	add	r2, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80019c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001a34 <UART_SetConfig+0x118>)
 80019ca:	fba3 0302 	umull	r0, r3, r3, r2
 80019ce:	095b      	lsrs	r3, r3, #5
 80019d0:	2064      	movs	r0, #100	@ 0x64
 80019d2:	fb00 f303 	mul.w	r3, r0, r3
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	011b      	lsls	r3, r3, #4
 80019da:	3332      	adds	r3, #50	@ 0x32
 80019dc:	4a15      	ldr	r2, [pc, #84]	@ (8001a34 <UART_SetConfig+0x118>)
 80019de:	fba2 2303 	umull	r2, r3, r2, r3
 80019e2:	095b      	lsrs	r3, r3, #5
 80019e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80019e8:	4419      	add	r1, r3
 80019ea:	68fa      	ldr	r2, [r7, #12]
 80019ec:	4613      	mov	r3, r2
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	4413      	add	r3, r2
 80019f2:	009a      	lsls	r2, r3, #2
 80019f4:	441a      	add	r2, r3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a00:	4b0c      	ldr	r3, [pc, #48]	@ (8001a34 <UART_SetConfig+0x118>)
 8001a02:	fba3 0302 	umull	r0, r3, r3, r2
 8001a06:	095b      	lsrs	r3, r3, #5
 8001a08:	2064      	movs	r0, #100	@ 0x64
 8001a0a:	fb00 f303 	mul.w	r3, r0, r3
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	011b      	lsls	r3, r3, #4
 8001a12:	3332      	adds	r3, #50	@ 0x32
 8001a14:	4a07      	ldr	r2, [pc, #28]	@ (8001a34 <UART_SetConfig+0x118>)
 8001a16:	fba2 2303 	umull	r2, r3, r2, r3
 8001a1a:	095b      	lsrs	r3, r3, #5
 8001a1c:	f003 020f 	and.w	r2, r3, #15
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	440a      	add	r2, r1
 8001a26:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001a28:	bf00      	nop
 8001a2a:	3710      	adds	r7, #16
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	40013800 	.word	0x40013800
 8001a34:	51eb851f 	.word	0x51eb851f

08001a38 <memset>:
 8001a38:	4603      	mov	r3, r0
 8001a3a:	4402      	add	r2, r0
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d100      	bne.n	8001a42 <memset+0xa>
 8001a40:	4770      	bx	lr
 8001a42:	f803 1b01 	strb.w	r1, [r3], #1
 8001a46:	e7f9      	b.n	8001a3c <memset+0x4>

08001a48 <__libc_init_array>:
 8001a48:	b570      	push	{r4, r5, r6, lr}
 8001a4a:	2600      	movs	r6, #0
 8001a4c:	4d0c      	ldr	r5, [pc, #48]	@ (8001a80 <__libc_init_array+0x38>)
 8001a4e:	4c0d      	ldr	r4, [pc, #52]	@ (8001a84 <__libc_init_array+0x3c>)
 8001a50:	1b64      	subs	r4, r4, r5
 8001a52:	10a4      	asrs	r4, r4, #2
 8001a54:	42a6      	cmp	r6, r4
 8001a56:	d109      	bne.n	8001a6c <__libc_init_array+0x24>
 8001a58:	f000 f81a 	bl	8001a90 <_init>
 8001a5c:	2600      	movs	r6, #0
 8001a5e:	4d0a      	ldr	r5, [pc, #40]	@ (8001a88 <__libc_init_array+0x40>)
 8001a60:	4c0a      	ldr	r4, [pc, #40]	@ (8001a8c <__libc_init_array+0x44>)
 8001a62:	1b64      	subs	r4, r4, r5
 8001a64:	10a4      	asrs	r4, r4, #2
 8001a66:	42a6      	cmp	r6, r4
 8001a68:	d105      	bne.n	8001a76 <__libc_init_array+0x2e>
 8001a6a:	bd70      	pop	{r4, r5, r6, pc}
 8001a6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a70:	4798      	blx	r3
 8001a72:	3601      	adds	r6, #1
 8001a74:	e7ee      	b.n	8001a54 <__libc_init_array+0xc>
 8001a76:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a7a:	4798      	blx	r3
 8001a7c:	3601      	adds	r6, #1
 8001a7e:	e7f2      	b.n	8001a66 <__libc_init_array+0x1e>
 8001a80:	08001ad4 	.word	0x08001ad4
 8001a84:	08001ad4 	.word	0x08001ad4
 8001a88:	08001ad4 	.word	0x08001ad4
 8001a8c:	08001ad8 	.word	0x08001ad8

08001a90 <_init>:
 8001a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a92:	bf00      	nop
 8001a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a96:	bc08      	pop	{r3}
 8001a98:	469e      	mov	lr, r3
 8001a9a:	4770      	bx	lr

08001a9c <_fini>:
 8001a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a9e:	bf00      	nop
 8001aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001aa2:	bc08      	pop	{r3}
 8001aa4:	469e      	mov	lr, r3
 8001aa6:	4770      	bx	lr
